import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchTree } from "./AppApi";
import { dishes } from "../../module";

const initialState = {
  products: [],
  list: [],
  loading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const treeAsync = createAsyncThunk(
  "tree/fetchTree",
  async (amount) => {
    const response = await fetchTree(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const treeSlice = createSlice({
  name: "tree",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changeStatus: (state, action) => {
      const product = action.payload;
      state.products = dishes.setStatus(
        product,
        state.products,
        !product.active
      );
    },
    changeExpand: (state, action) => {
      const product = action.payload;
      state.products = dishes.set(product, state.products, 'expanded', !product.expanded);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(treeAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(treeAsync.fulfilled, (state, action) => {
        const list = dishes.flatten(action.payload);
        const products = dishes.tree(action.payload, list);
        state.loading = false;
        state.products = products;
        state.list = list;
      });
  },
});

export const { changeStatus, changeExpand, } = treeSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProducts = (state) => state.tree.products;


export default treeSlice.reducer;
