{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getProducts } from \"../../services/api\";\nimport { product, category, tree } from \"../../module\";\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false\n};\nexport const treeAsync = createAsyncThunk(\"tree/getProducts\", async id => {\n  const response = await getProducts(id);\n  return response.data;\n});\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      const status = item.hasOwnProperty(\"active\") ? !item.active : !!!item.disabled;\n      console.log(status);\n      const tree2 = category.changeDisabled(item, state.products, status);\n      const list = product.flatten(tree);\n      state.products = product.tree(tree, list);\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = product.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = product.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      console.log(item);\n      state.products = product.remove(item, state.products);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(treeAsync.pending, state => {\n      state.loading = true;\n    }).addCase(treeAsync.fulfilled, (state, action) => {\n      console.log(action.payload);\n      let list = product.flatten(action.payload);\n      list = product.getPassive(list);\n      const products = product.tree(action.payload, list);\n      state.loading = false;\n      state.products = products;\n      state.list = list;\n    });\n  }\n});\nexport const {\n  changeStatus,\n  changeExpand,\n  insert,\n  remove\n} = treeSlice.actions;\nexport const selectProducts = state => state.tree.products;\nexport default treeSlice.reducer;","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/App/App.slice.js"],"names":["createAsyncThunk","createSlice","getProducts","product","category","tree","initialState","products","list","loading","treeAsync","id","response","data","treeSlice","name","reducers","changeStatus","state","action","item","payload","status","hasOwnProperty","active","disabled","console","log","tree2","changeDisabled","flatten","changeExpand","set","expanded","insert","parent_id","product_id","concat","remove","extraReducers","builder","addCase","pending","fulfilled","getPassive","actions","selectProducts","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getProducts } from \"../../services/api\";\nimport { product, category, tree } from \"../../module\";\n\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false,\n};\n\nexport const treeAsync = createAsyncThunk(\n  \"tree/getProducts\",\n  async (id) => {\n    const response = await getProducts(id);\n    return response.data;\n  }\n);\n\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      const status = item.hasOwnProperty(\"active\") ? !item.active : !!!item.disabled;\n      console.log(status)\n      const tree2 = category.changeDisabled(item, state.products, status);\n      const list = product.flatten(tree);\n      state.products = product.tree(tree, list);\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = product.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = product.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      console.log(item)\n      state.products = product.remove(item, state.products);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(treeAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(treeAsync.fulfilled, (state, action) => {\n        console.log(action.payload);\n        let list = product.flatten(action.payload);\n        list = product.getPassive(list);\n        const products = product.tree(action.payload, list);\n        state.loading = false;\n        state.products = products;\n        state.list = list;\n      });\n  },\n});\n\nexport const { changeStatus, changeExpand, insert, remove } = treeSlice.actions;\n\nexport const selectProducts = (state) => state.tree.products;\n\nexport default treeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}