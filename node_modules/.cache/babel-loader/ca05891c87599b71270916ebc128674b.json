{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/PopupCropper/PopupCropper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport styles from \"./PopupCropper.module.css\";\nimport cn from \"classnames\";\nimport { Popup } from \"../\";\nimport { Button } from \"react-bootstrap\";\nimport * as cropperSlice from \"./PopupCropper.slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cropOptions = {\n  width: 750,\n  height: 470\n};\nexport const PopupCropper = () => {\n  _s();\n\n  const [cropper, setCropper] = useState();\n  const cropperRef = useRef(null);\n  const dispatch = useDispatch();\n  const state = useSelector(cropperSlice.selectState);\n  const image = useSelector(cropperSlice.selectImage);\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      console.log(cropper.getCroppedCanvas().toDataURL());\n    }\n  };\n\n  const onCrop = () => {\n    const imageElement = cropperRef === null || cropperRef === void 0 ? void 0 : cropperRef.current;\n    const cropper = imageElement === null || imageElement === void 0 ? void 0 : imageElement.cropper; //console.log(cropper.getCroppedCanvas().toDataURL());\n  };\n\n  return /*#__PURE__*/_jsxDEV(Popup, {\n    className: styles.popup,\n    classContainer: styles.container,\n    opened: state,\n    children: [/*#__PURE__*/_jsxDEV(Cropper, {\n      src: image || '',\n      style: cropOptions,\n      aspectRatio: 75 / 47,\n      autoCropArea: 1,\n      ref: cropperRef,\n      onInitialized: instance => {\n        setCropper(instance);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttons,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: getCropData,\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PopupCropper, \"s5rco5DzFZKlL8YEehwrRPvuGf4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PopupCropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopupCropper\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/PopupCropper/PopupCropper.js"],"names":["React","useRef","useState","useSelector","useDispatch","Cropper","styles","cn","Popup","Button","cropperSlice","cropOptions","width","height","PopupCropper","cropper","setCropper","cropperRef","dispatch","state","selectState","image","selectImage","getCropData","console","log","getCroppedCanvas","toDataURL","onCrop","imageElement","current","popup","container","instance","buttons"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,4BAAP;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,KAAT,QAAsB,KAAtB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,KAAKC,YAAZ,MAA8B,sBAA9B;;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,GADW;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAApB;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0Bd,QAAQ,EAAxC;AAEA,QAAMe,UAAU,GAAGhB,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMiB,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAMe,KAAK,GAAGhB,WAAW,CAACO,YAAY,CAACU,WAAd,CAAzB;AACA,QAAMC,KAAK,GAAGlB,WAAW,CAACO,YAAY,CAACY,WAAd,CAAzB;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAI,OAAOR,OAAP,KAAmB,WAAvB,EAAoC;AAClCS,MAAAA,OAAO,CAACC,GAAR,CAAYV,OAAO,CAACW,gBAAR,GAA2BC,SAA3B,EAAZ;AACD;AACF,GAJD;;AAMA,QAAMC,MAAM,GAAG,MAAM;AACnB,UAAMC,YAAY,GAAGZ,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEa,OAAjC;AACA,UAAMf,OAAO,GAAGc,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEd,OAA9B,CAFmB,CAGnB;AACD,GAJD;;AAMA,sBACE,QAAC,KAAD;AAAO,IAAA,SAAS,EAAET,MAAM,CAACyB,KAAzB;AAAgC,IAAA,cAAc,EAAEzB,MAAM,CAAC0B,SAAvD;AAAkE,IAAA,MAAM,EAAEb,KAA1E;AAAA,4BACE,QAAC,OAAD;AACE,MAAA,GAAG,EAAEE,KAAK,IAAI,EADhB;AAEE,MAAA,KAAK,EAAEV,WAFT;AAGE,MAAA,WAAW,EAAE,KAAK,EAHpB;AAIE,MAAA,YAAY,EAAE,CAJhB;AAKE,MAAA,GAAG,EAAEM,UALP;AAME,MAAA,aAAa,EAAGgB,QAAD,IAAc;AAC3BjB,QAAAA,UAAU,CAACiB,QAAD,CAAV;AACD;AARH;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAK,MAAA,SAAS,EAAE3B,MAAM,CAAC4B,OAAvB;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEX,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAtCM;;GAAMT,Y;UAIMV,W,EACHD,W,EACAA,W;;;KANHW,Y","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport styles from \"./PopupCropper.module.css\";\nimport cn from \"classnames\";\nimport { Popup } from \"../\";\nimport { Button } from \"react-bootstrap\";\nimport * as cropperSlice from \"./PopupCropper.slice\";\n\nconst cropOptions = {\n  width: 750,\n  height: 470,\n};\n\nexport const PopupCropper = () => {\n  const [ cropper, setCropper ] = useState();\n\n  const cropperRef = useRef(null);\n  const dispatch = useDispatch();\n  const state = useSelector(cropperSlice.selectState);\n  const image = useSelector(cropperSlice.selectImage);\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      console.log(cropper.getCroppedCanvas().toDataURL());\n    }\n  };\n\n  const onCrop = () => {\n    const imageElement = cropperRef?.current;\n    const cropper = imageElement?.cropper;\n    //console.log(cropper.getCroppedCanvas().toDataURL());\n  };\n  \n  return (\n    <Popup className={styles.popup} classContainer={styles.container} opened={state}>\n      <Cropper\n        src={image || ''}\n        style={cropOptions}\n        aspectRatio={75 / 47}\n        autoCropArea={1}\n        ref={cropperRef}\n        onInitialized={(instance) => {\n          setCropper(instance);\n        }}\n      />\n      <div className={styles.buttons}>\n        <Button onClick={getCropData}>Добавить</Button>\n        <Button variant=\"secondary\">Отмена</Button>\n      </div>\n    </Popup>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}