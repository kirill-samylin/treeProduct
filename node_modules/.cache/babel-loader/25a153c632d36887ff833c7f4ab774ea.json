{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect, memo } from 'react';\nimport styles from './Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tree = /*#__PURE__*/memo(_c = _s(({\n  id,\n  tree,\n  className,\n  expanded\n}) => {\n  _s();\n\n  const treeElement = /*#__PURE__*/createRef(null);\n\n  function getKey({\n    category_id,\n    product_id,\n    parent_id\n  }) {\n    if (!parent_id) {\n      return category_id;\n    }\n\n    if (!product_id) {\n      return category_id;\n    }\n\n    return product_id;\n  }\n\n  const onSort = () => {//console.log('1234')\n  };\n\n  const onEnd = evt => {\n    const item = evt.item; // dragged HTMLElement\n\n    const parent = evt.from;\n    const id = item.dataset.id;\n    const category_id = parent.dataset.id;\n    const index = evt.newIndex;\n    console.log({\n      'id предмета': id,\n      'id категории куда суем': category_id,\n      'index - место куда вставляем': index\n    }); // evt.to;    // target list\n    // evt.from;  // previous list\n    // evt.oldIndex;  // element's old index within old parent\n    // evt.newIndex;  // element's new index within new parent\n    // evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n    // evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n    // evt.clone // the clone element\n    // evt.pullMode;\n    // console.log(item)\n    // console.log(id, category_id)\n    // console.log(evt.oldIndex, evt.newIndex)\n  };\n\n  useEffect(() => {\n    window.$(treeElement.current).sortable({\n      // fallbackOnBody: false,\n      selectedClass: styles.selected,\n      multiDrag: true,\n      group: 'list',\n      animation: 200,\n      ghostClass: 'ghost',\n      handle: '.position',\n      onSort: onSort,\n      onEnd\n    });\n  }, [treeElement]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    ref: treeElement,\n    \"data-id\": id,\n    className: cn(styles.tree, className, 'list-group', {\n      [styles.open]: expanded\n    }),\n    children: tree && tree.map(branch => /*#__PURE__*/_jsxDEV(Branch, {\n      product: branch\n    }, getKey(branch), false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"));\n_c2 = Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree$memo\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js"],"names":["React","createRef","useEffect","memo","styles","Branch","cn","Tree","id","tree","className","expanded","treeElement","getKey","category_id","product_id","parent_id","onSort","onEnd","evt","item","parent","from","dataset","index","newIndex","console","log","window","$","current","sortable","selectedClass","selected","multiDrag","group","animation","ghostClass","handle","open","map","branch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,IAAtC,QAAkD,OAAlD;AACA,OAAOC,MAAP,MAAkB,mBAAlB;AACA,SAASC,MAAT,QAAuB,KAAvB;AACA,OAAOC,EAAP,MAAe,YAAf;;AAEA,OAAO,MAAMC,IAAI,gBAAGJ,IAAI,SAAC,CAAC;AAAEK,EAAAA,EAAF;AAAMC,EAAAA,IAAN;AAAYC,EAAAA,SAAZ;AAAuBC,EAAAA;AAAvB,CAAD,KAAsC;AAAA;;AAC3D,QAAMC,WAAW,gBAAGX,SAAS,CAAC,IAAD,CAA7B;;AAEA,WAASY,MAAT,CAAgB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,GAAhB,EAAyD;AACrD,QAAI,CAACA,SAAL,EAAgB;AACZ,aAAOF,WAAP;AACH;;AACD,QAAI,CAACC,UAAL,EAAiB;AACb,aAAOD,WAAP;AACH;;AACD,WAAOC,UAAP;AACH;;AACD,QAAME,MAAM,GAAG,MAAM,CAEjB;AACH,GAHD;;AAIA,QAAMC,KAAK,GAAIC,GAAD,IAAS;AACnB,UAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB,CADmB,CACK;;AACxB,UAAMC,MAAM,GAAGF,GAAG,CAACG,IAAnB;AACA,UAAMd,EAAE,GAAGY,IAAI,CAACG,OAAL,CAAaf,EAAxB;AACA,UAAMM,WAAW,GAAGO,MAAM,CAACE,OAAP,CAAef,EAAnC;AACA,UAAMgB,KAAK,GAAGL,GAAG,CAACM,QAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AACR,qBAAenB,EADP;AAER,gCAA0BM,WAFlB;AAGR,sCAAgCU;AAHxB,KAAZ,EANmB,CAWnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAtBD;;AAwBAtB,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,MAAM,CAACC,CAAP,CAASjB,WAAW,CAACkB,OAArB,EAA8BC,QAA9B,CAAuC;AACnC;AACAC,MAAAA,aAAa,EAAE5B,MAAM,CAAC6B,QAFa;AAGnCC,MAAAA,SAAS,EAAE,IAHwB;AAInCC,MAAAA,KAAK,EAAE,MAJ4B;AAKnCC,MAAAA,SAAS,EAAE,GALwB;AAMnCC,MAAAA,UAAU,EAAE,OANuB;AAOnCC,MAAAA,MAAM,EAAE,WAP2B;AAQnCrB,MAAAA,MAAM,EAAEA,MAR2B;AASnCC,MAAAA;AATmC,KAAvC;AAWH,GAZQ,EAYN,CAACN,WAAD,CAZM,CAAT;AAcA,sBACI;AAAI,IAAA,GAAG,EAAEA,WAAT;AAAsB,eAASJ,EAA/B;AAAmC,IAAA,SAAS,EAAEF,EAAE,CAACF,MAAM,CAACK,IAAR,EAAcC,SAAd,EAAyB,YAAzB,EAAuC;AACnF,OAACN,MAAM,CAACmC,IAAR,GAAe5B;AADoE,KAAvC,CAAhD;AAAA,cAGKF,IAAI,IAAIA,IAAI,CAAC+B,GAAL,CAAUC,MAAD,iBACd,QAAC,MAAD;AAEI,MAAA,OAAO,EAAEA;AAFb,OACS5B,MAAM,CAAC4B,MAAD,CADf;AAAA;AAAA;AAAA;AAAA,YADK;AAHb;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAlEuB,kCAAjB;MAAMlC,I","sourcesContent":["import React, { createRef, useEffect, memo } from 'react';\nimport styles from'./Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\n\nexport const Tree = memo(({ id, tree, className, expanded}) => {\n    const treeElement = createRef(null);\n    \n    function getKey({ category_id, product_id, parent_id, }) {\n        if (!parent_id) {\n            return category_id\n        } \n        if (!product_id) {\n            return category_id;\n        }\n        return product_id;\n    }\n    const onSort = () => {\n\n        //console.log('1234')\n    };\n    const onEnd = (evt) => {\n        const item = evt.item;  // dragged HTMLElement\n        const parent = evt.from;\n        const id = item.dataset.id;\n        const category_id = parent.dataset.id;\n        const index = evt.newIndex;\n        console.log({\n            'id предмета': id,\n            'id категории куда суем': category_id,\n            'index - место куда вставляем': index,\n        });\n        // evt.to;    // target list\n        // evt.from;  // previous list\n        // evt.oldIndex;  // element's old index within old parent\n        // evt.newIndex;  // element's new index within new parent\n        // evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n        // evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n        // evt.clone // the clone element\n        // evt.pullMode;\n        // console.log(item)\n        // console.log(id, category_id)\n        // console.log(evt.oldIndex, evt.newIndex)\n    };\n\n    useEffect(() => {\n        window.$(treeElement.current).sortable({ \n            // fallbackOnBody: false,\n            selectedClass: styles.selected,\n            multiDrag: true,\n            group: 'list',\n            animation: 200,\n            ghostClass: 'ghost',\n            handle: '.position',\n            onSort: onSort,\n            onEnd,\n        });\n    }, [treeElement]);\n\n    return (\n        <ul ref={treeElement} data-id={id} className={cn(styles.tree, className, 'list-group', {\n            [styles.open]: expanded,\n        })}>\n            {tree && tree.map((branch) => (\n                <Branch \n                    key={getKey(branch)} \n                    product={branch}\n                />\n            ))}\n        </ul>\n    )\n});"]},"metadata":{},"sourceType":"module"}