{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getProducts } from \"../../services/api\";\nimport { tree } from \"../../utils\";\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false\n};\nexport const treeAsync = createAsyncThunk(\"tree/getProducts\", async id => {\n  const response = await getProducts(id);\n  return response.data;\n});\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      let items = [];\n\n      if (item.hasOwnProperty(\"active\") && item.active || item.hasOwnProperty(\"disabled\") && !item.disabled) {\n        state.products = tree.offBranch(item, state.products);\n      } else {\n        state.products = tree.onBranch(item, state.products);\n      }\n\n      let list = tree.flatten(items);\n      list = tree.passiveMode(list);\n      state.products = tree.get(items, list);\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = tree.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = tree.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      state.products = tree.remove(item, state.products);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(treeAsync.pending, state => {\n      state.loading = true;\n    }).addCase(treeAsync.fulfilled, (state, action) => {\n      state.products = action.payload;\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  changeStatus,\n  changeExpand,\n  insert,\n  remove\n} = treeSlice.actions;\nexport const selectProducts = state => {\n  return state.tree.products;\n};\nexport const selectTree = state => {\n  const items = state.tree.products;\n  let list = tree.flatten(items);\n  list = tree.passiveMode(list);\n  const products = tree.get(items, list);\n  return {\n    list,\n    products\n  };\n};\nexport default treeSlice.reducer;","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/App/App.slice.js"],"names":["createAsyncThunk","createSlice","getProducts","tree","initialState","products","list","loading","treeAsync","id","response","data","treeSlice","name","reducers","changeStatus","state","action","item","payload","items","hasOwnProperty","active","disabled","offBranch","onBranch","flatten","passiveMode","get","changeExpand","set","expanded","insert","parent_id","product_id","concat","remove","extraReducers","builder","addCase","pending","fulfilled","actions","selectProducts","selectTree","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getProducts } from \"../../services/api\";\nimport { tree } from \"../../utils\";\n\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false,\n};\n\nexport const treeAsync = createAsyncThunk(\n  \"tree/getProducts\",\n  async (id) => {\n    const response = await getProducts(id);\n    return response.data;\n  }\n);\n\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      let items = [];\n      if ((item.hasOwnProperty(\"active\") && item.active) || (item.hasOwnProperty(\"disabled\") && !item.disabled)) {\n        state.products = tree.offBranch(item, state.products);\n      } else {\n        state.products = tree.onBranch(item, state.products);\n      }\n      let list = tree.flatten(items);\n      list = tree.passiveMode(list);\n      state.products = tree.get(items, list);\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = tree.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = tree.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      state.products = tree.remove(item, state.products);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(treeAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(treeAsync.fulfilled, (state, action) => {\n        state.products = action.payload;\n        state.loading = false;\n      });\n  },\n});\n\nexport const { changeStatus, changeExpand, insert, remove } = treeSlice.actions;\n\nexport const selectProducts = (state) => { \n  return state.tree.products\n};\n\nexport const selectTree = (state) => {\n  const items = state.tree.products;\n  let list = tree.flatten(items);\n  list = tree.passiveMode(list);\n  const products = tree.get(items, list);\n  return { list, products };\n};\n\nexport default treeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}