{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect, memo } from 'react';\nimport styles from './Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tree = /*#__PURE__*/memo(_c = _s(({\n  id,\n  tree,\n  className,\n  expanded,\n  put = true\n}) => {\n  _s();\n\n  const treeElement = /*#__PURE__*/createRef(null);\n\n  function getKey({\n    category_id,\n    product_id,\n    parent_id\n  }) {\n    if (!parent_id) {\n      return category_id;\n    }\n\n    if (!product_id) {\n      return category_id;\n    }\n\n    return product_id;\n  }\n\n  const onSort = () => {\n    console.log('1234');\n    return false;\n  };\n\n  const onEnd = evt => {\n    const item = evt.item; // dragged HTMLElement\n\n    const parent = evt.from;\n    const id = item.dataset.id;\n    const name = item.dataset.name;\n    const category_id = parent.dataset.id;\n    const index = evt.newIndex;\n    console.log({\n      'id предмета': id,\n      'id категории куда суем': category_id,\n      'index - место куда вставляем': index\n    }); // evt.to;    // target list\n    // evt.from;  // previous list\n    // evt.oldIndex;  // element's old index within old parent\n    // evt.newIndex;  // element's new index within new parent\n    // evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n    // evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n    // evt.clone // the clone element\n    // evt.pullMode;\n    // console.log(item)\n    // console.log(id, category_id)\n    // console.log(evt.oldIndex, evt.newIndex)\n  };\n\n  const onMove = evt => {\n    console.log(evt);\n    const parent = evt.from;\n    const item = evt.dragged;\n    const category_id = parent.dataset.id;\n    const name = item.dataset.name;\n    console.log(category_id, name);\n    if (category_id == \"root\" && name === \"product\") return false;\n    return true;\n  };\n\n  useEffect(() => {\n    window.$(treeElement.current).sortable({\n      // fallbackOnBody: false,\n      selectedClass: styles.selected,\n      multiDrag: true,\n      group: {\n        name: 'list',\n        put\n      },\n      animation: 200,\n      ghostClass: 'ghost',\n      handle: '.position',\n      onSort: onSort,\n      onEnd,\n      onMove\n    });\n  }, [treeElement, put]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    ref: treeElement,\n    \"data-id\": id,\n    className: cn(styles.tree, className, 'list-group', {\n      [styles.open]: expanded\n    }),\n    children: tree && tree.map(branch => /*#__PURE__*/_jsxDEV(Branch, {\n      product: branch\n    }, getKey(branch), false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"));\n_c2 = Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree$memo\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js"],"names":["React","createRef","useEffect","memo","styles","Branch","cn","Tree","id","tree","className","expanded","put","treeElement","getKey","category_id","product_id","parent_id","onSort","console","log","onEnd","evt","item","parent","from","dataset","name","index","newIndex","onMove","dragged","window","$","current","sortable","selectedClass","selected","multiDrag","group","animation","ghostClass","handle","open","map","branch"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, memo } from 'react';\nimport styles from'./Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\n\nexport const Tree = memo(({ id, tree, className, expanded, put=true}) => {\n    const treeElement = createRef(null);\n    \n    function getKey({ category_id, product_id, parent_id, }) {\n        if (!parent_id) {\n            return category_id\n        } \n        if (!product_id) {\n            return category_id;\n        }\n        return product_id;\n    }\n    const onSort = () => {\n\n        console.log('1234')\n        return false\n    };\n    const onEnd = (evt) => {\n        const item = evt.item;  // dragged HTMLElement\n        const parent = evt.from;\n        const id = item.dataset.id;\n        const name = item.dataset.name;\n        const category_id = parent.dataset.id;\n        const index = evt.newIndex;\n        console.log({\n            'id предмета': id,\n            'id категории куда суем': category_id,\n            'index - место куда вставляем': index,\n        });\n        // evt.to;    // target list\n        // evt.from;  // previous list\n        // evt.oldIndex;  // element's old index within old parent\n        // evt.newIndex;  // element's new index within new parent\n        // evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n        // evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n        // evt.clone // the clone element\n        // evt.pullMode;\n        // console.log(item)\n        // console.log(id, category_id)\n        // console.log(evt.oldIndex, evt.newIndex)\n    };\n    const onMove = (evt) => {\n        console.log(evt);\n        const parent = evt.from;\n        const item = evt.dragged;\n        const category_id = parent.dataset.id;\n        const name = item.dataset.name;\n        console.log(category_id, name)\n        if (category_id == \"root\" && name === \"product\") return false\n        return true\n    };\n    useEffect(() => {\n        window.$(treeElement.current).sortable({ \n            // fallbackOnBody: false,\n            selectedClass: styles.selected,\n            multiDrag: true,\n            group: {\n                name: 'list',\n                put\n            },\n            animation: 200,\n            ghostClass: 'ghost',\n            handle: '.position',\n            onSort: onSort,\n            onEnd,\n            onMove,\n        });\n    }, [treeElement, put]);\n\n    return (\n        <ul ref={treeElement} data-id={id} className={cn(styles.tree, className, 'list-group', {\n            [styles.open]: expanded,\n        })}>\n            {tree && tree.map((branch) => (\n                <Branch \n                    key={getKey(branch)} \n                    product={branch}\n                />\n            ))}\n        </ul>\n    )\n});"]},"metadata":{},"sourceType":"module"}