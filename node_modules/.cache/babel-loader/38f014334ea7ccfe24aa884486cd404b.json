{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { saveImage, getImageUrl } from \"../../services/api\";\nconst initialState = {\n  isOpen: false,\n  image: \"\",\n  url: \"\",\n  loading: false,\n  imageLoad: false,\n  images: []\n};\nexport const saveImageAsync = createAsyncThunk(\"imageCropper/saveImage\", async data => {\n  const response = await saveImage(data);\n  return response.data;\n});\nexport const getImageUrlAsync = createAsyncThunk(\"imageCropper/getImageUrl\", async data => {\n  const response = await data.reduce(async (arr, image) => {\n    const formData = new FormData();\n    formData.append(\"image\", image.blob);\n    const url = await getImageUrl(formData);\n    arr.push({\n      [image.key]: url\n    });\n    return arr;\n  }, []);\n  console.log(response);\n  return Promise.A; //return response.data;\n});\nexport const imageCropperSlice = createSlice({\n  name: \"imageCropper\",\n  initialState,\n  reducers: {\n    handleClose: state => {\n      state.imageLoad = false;\n      state.isOpen = false;\n      state.image = \"\";\n    },\n    handleOpen: (state, action) => {\n      state.imageLoad = true;\n      state.image = action.payload;\n      state.isOpen = true;\n    },\n    handleRemove: state => {\n      state.url = \"\";\n    },\n    offImageLoad: state => {\n      state.imageLoad = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(saveImageAsync.pending, state => {\n      state.url = \"\";\n      state.imageLoad = true;\n      state.loading = true;\n      state.isOpen = false;\n    }).addCase(saveImageAsync.fulfilled, (state, action) => {\n      state.url = action.payload;\n      state.loading = false;\n      state.imageLoad = false;\n    });\n  }\n});\nexport const {\n  handleClose,\n  handleOpen,\n  handleRemove,\n  offImageLoad\n} = imageCropperSlice.actions;\nexport const selectState = state => state.imageCropper.isOpen;\nexport const selectImage = state => state.imageCropper.image;\nexport const selectUrl = state => state.imageCropper.url;\nexport const selectLoading = state => state.imageCropper.loading;\nexport const selectImageLoad = state => state.imageCropper.imageLoad;\nexport default imageCropperSlice.reducer;","map":null,"metadata":{},"sourceType":"module"}