{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/PopupCropper/PopupCropper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport styles from \"./PopupCropper.module.css\";\nimport cn from \"classnames\";\nimport { Popup } from \"../\";\nimport { Button } from \"react-bootstrap\";\nimport * as cropperSlice from \"./PopupCropper.slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cropOptions = {\n  width: 750,\n  height: 470\n};\nexport const PopupCropper = () => {\n  _s();\n\n  const cropperRef = useRef(null);\n  const dispatch = useDispatch();\n  const state = useSelector(cropperSlice.selectState);\n  const image = useSelector(cropperSlice.selectImage);\n\n  const onCrop = () => {\n    const imageElement = cropperRef === null || cropperRef === void 0 ? void 0 : cropperRef.current;\n    const cropper = imageElement === null || imageElement === void 0 ? void 0 : imageElement.cropper; //console.log(cropper.getCroppedCanvas().toDataURL());\n  };\n\n  return /*#__PURE__*/_jsxDEV(Popup, {\n    className: styles.popup,\n    classContainer: styles.container,\n    opened: state,\n    children: [/*#__PURE__*/_jsxDEV(Cropper, {\n      src: image || '',\n      style: cropOptions,\n      aspectRatio: 75 / 47,\n      autoCropArea: 1,\n      crop: onCrop,\n      ref: cropperRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.button,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        children: \"fdsadfasdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PopupCropper, \"eRHv+LheDIHcQ0/PO8dmk5wvW0U=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PopupCropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopupCropper\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/PopupCropper/PopupCropper.js"],"names":["React","useRef","useSelector","useDispatch","Cropper","styles","cn","Popup","Button","cropperSlice","cropOptions","width","height","PopupCropper","cropperRef","dispatch","state","selectState","image","selectImage","onCrop","imageElement","current","cropper","popup","container","button"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,4BAAP;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,KAAT,QAAsB,KAAtB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,KAAKC,YAAZ,MAA8B,sBAA9B;;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,GADW;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAApB;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAMC,UAAU,GAAGb,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMc,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,KAAK,GAAGd,WAAW,CAACO,YAAY,CAACQ,WAAd,CAAzB;AACA,QAAMC,KAAK,GAAGhB,WAAW,CAACO,YAAY,CAACU,WAAd,CAAzB;;AAIA,QAAMC,MAAM,GAAG,MAAM;AACnB,UAAMC,YAAY,GAAGP,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEQ,OAAjC;AACA,UAAMC,OAAO,GAAGF,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEE,OAA9B,CAFmB,CAGnB;AACD,GAJD;;AAMA,sBACE,QAAC,KAAD;AAAO,IAAA,SAAS,EAAElB,MAAM,CAACmB,KAAzB;AAAgC,IAAA,cAAc,EAAEnB,MAAM,CAACoB,SAAvD;AAAkE,IAAA,MAAM,EAAET,KAA1E;AAAA,4BACE,QAAC,OAAD;AACE,MAAA,GAAG,EAAEE,KAAK,IAAI,EADhB;AAEE,MAAA,KAAK,EAAER,WAFT;AAGE,MAAA,WAAW,EAAE,KAAK,EAHpB;AAIE,MAAA,YAAY,EAAE,CAJhB;AAKE,MAAA,IAAI,EAAEU,MALR;AAME,MAAA,GAAG,EAAEN;AANP;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAK,MAAA,SAAS,EAAET,MAAM,CAACqB,MAAvB;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA7BM;;GAAMb,Y;UAEMV,W,EACHD,W,EACAA,W;;;KAJHW,Y","sourcesContent":["import React, { useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport styles from \"./PopupCropper.module.css\";\nimport cn from \"classnames\";\nimport { Popup } from \"../\";\nimport { Button } from \"react-bootstrap\";\nimport * as cropperSlice from \"./PopupCropper.slice\";\n\nconst cropOptions = {\n  width: 750,\n  height: 470,\n};\n\nexport const PopupCropper = () => {\n  const cropperRef = useRef(null);\n  const dispatch = useDispatch();\n  const state = useSelector(cropperSlice.selectState);\n  const image = useSelector(cropperSlice.selectImage);\n\n\n\n  const onCrop = () => {\n    const imageElement = cropperRef?.current;\n    const cropper = imageElement?.cropper;\n    //console.log(cropper.getCroppedCanvas().toDataURL());\n  };\n  \n  return (\n    <Popup className={styles.popup} classContainer={styles.container} opened={state}>\n      <Cropper\n        src={image || ''}\n        style={cropOptions}\n        aspectRatio={75 / 47}\n        autoCropArea={1}\n        crop={onCrop}\n        ref={cropperRef}\n      />\n      <div className={styles.button}>\n        <Button>fdsadfasdf</Button>\n      </div>\n    </Popup>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}