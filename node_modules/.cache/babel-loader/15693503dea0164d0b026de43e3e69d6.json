{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect } from 'react';\nimport styles from './Tree.module.css';\nimport './Tree.css';\nimport { Branch } from '../';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tree = ({\n  tree\n}) => {\n  _s();\n\n  const treeElement = /*#__PURE__*/createRef(null);\n\n  function getKey({\n    category_id,\n    product_id,\n    parent_id\n  }) {\n    if (!parent_id) {\n      return category_id;\n    }\n\n    if (!product_id) {\n      return category_id;\n    }\n\n    return product_id;\n  }\n\n  useEffect(() => {\n    window.$(treeElement).sortable({\n      // fallbackOnBody: false,\n      group: 'list',\n      animation: 200,\n      ghostClass: 'ghost',\n      handle: '.tree__category-position',\n      onEnd: function (evt) {\n        const {\n          item,\n          to,\n          from,\n          oldIndex,\n          newIndex\n        } = evt.item; // dragged HTMLElement\n\n        evt.to; // target list\n\n        evt.from; // previous list\n\n        evt.oldIndex; // element's old index within old parent\n\n        evt.newIndex; // element's new index within new parent\n\n        evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n\n        evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n\n        evt.clone; // the clone element\n\n        evt.pullMode;\n        console.log(itemEl);\n\n        if (evt.to.id === \"sTree2\" && itemEl.type === \"item\") {\n          alert(\"Ай бля\");\n        }\n      }\n    });\n    console.log(treeElement);\n  }, [treeElement]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    ref: treeElement,\n    className: `${styles.tree} list-group m-4`,\n    id: \"tree\",\n    children: tree && tree.map(branch => /*#__PURE__*/_jsxDEV(Branch, { ...branch\n    }, getKey(branch), false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tree, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js"],"names":["React","createRef","useEffect","styles","Branch","Tree","tree","treeElement","getKey","category_id","product_id","parent_id","window","$","sortable","group","animation","ghostClass","handle","onEnd","evt","item","to","from","oldIndex","newIndex","oldDraggableIndex","newDraggableIndex","clone","pullMode","console","log","itemEl","id","type","alert","map","branch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAkB,mBAAlB;AACA,OAAO,YAAP;AACA,SAASC,MAAT,QAAuB,KAAvB;;AAGA,OAAO,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC9B,QAAMC,WAAW,gBAAGN,SAAS,CAAC,IAAD,CAA7B;;AACA,WAASO,MAAT,CAAgB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,GAAhB,EAAyD;AACrD,QAAI,CAACA,SAAL,EAAgB;AACZ,aAAOF,WAAP;AACH;;AACD,QAAI,CAACC,UAAL,EAAiB;AACb,aAAOD,WAAP;AACH;;AACD,WAAOC,UAAP;AACH;;AACDR,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,MAAM,CAACC,CAAP,CAASN,WAAT,EAAsBO,QAAtB,CAA+B;AAC3B;AACAC,MAAAA,KAAK,EAAE,MAFoB;AAG3BC,MAAAA,SAAS,EAAE,GAHgB;AAI3BC,MAAAA,UAAU,EAAE,OAJe;AAK3BC,MAAAA,MAAM,EAAE,0BALmB;AAM3BC,MAAAA,KAAK,EAAE,UAAUC,GAAV,EAAe;AAClB,cAAM;AACFC,UAAAA,IADE;AAEFC,UAAAA,EAFE;AAGFC,UAAAA,IAHE;AAIFC,UAAAA,QAJE;AAKFC,UAAAA;AALE,YAMFL,GAAG,CAACC,IANR,CADkB,CAOH;;AACfD,QAAAA,GAAG,CAACE,EAAJ,CARkB,CAQP;;AACXF,QAAAA,GAAG,CAACG,IAAJ,CATkB,CASP;;AACXH,QAAAA,GAAG,CAACI,QAAJ,CAVkB,CAUH;;AACfJ,QAAAA,GAAG,CAACK,QAAJ,CAXkB,CAWH;;AACfL,QAAAA,GAAG,CAACM,iBAAJ,CAZkB,CAYK;;AACvBN,QAAAA,GAAG,CAACO,iBAAJ,CAbkB,CAaK;;AACvBP,QAAAA,GAAG,CAACQ,KAAJ,CAdkB,CAcR;;AACVR,QAAAA,GAAG,CAACS,QAAJ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;;AACA,YAAIZ,GAAG,CAACE,EAAJ,CAAOW,EAAP,KAAY,QAAZ,IAAwBD,MAAM,CAACE,IAAP,KAAc,MAA1C,EAAkD;AAC9CC,UAAAA,KAAK,CAAC,QAAD,CAAL;AACH;AACJ;AA1B0B,KAA/B;AA4BAL,IAAAA,OAAO,CAACC,GAAR,CAAYxB,WAAZ;AACH,GA9BQ,EA8BP,CAACA,WAAD,CA9BO,CAAT;AA+BA,sBACI;AAAI,IAAA,GAAG,EAAEA,WAAT;AAAsB,IAAA,SAAS,EAAG,GAAEJ,MAAM,CAACG,IAAK,iBAAhD;AAAkE,IAAA,EAAE,EAAC,MAArE;AAAA,cACKA,IAAI,IAAIA,IAAI,CAAC8B,GAAL,CAAUC,MAAD,iBACd,QAAC,MAAD,OAAiCA;AAAjC,OAAa7B,MAAM,CAAC6B,MAAD,CAAnB;AAAA;AAAA;AAAA;AAAA,YADK;AADb;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAjDM;;GAAMhC,I;;KAAAA,I","sourcesContent":["import React, { createRef, useEffect } from 'react';\nimport styles from'./Tree.module.css';\nimport './Tree.css';\nimport { Branch } from '../';\n\n\nexport const Tree = ({ tree }) => {\n    const treeElement = createRef(null);\n    function getKey({ category_id, product_id, parent_id, }) {\n        if (!parent_id) {\n            return category_id\n        } \n        if (!product_id) {\n            return category_id;\n        }\n        return product_id;\n    }\n    useEffect(() => {\n        window.$(treeElement).sortable({ \n            // fallbackOnBody: false,\n            group: 'list',\n            animation: 200,\n            ghostClass: 'ghost',\n            handle: '.tree__category-position',\n            onEnd: function (evt) {\n                const {\n                    item,\n                    to,\n                    from,\n                    oldIndex,\n                    newIndex\n                } = evt.item;  // dragged HTMLElement\n                evt.to;    // target list\n                evt.from;  // previous list\n                evt.oldIndex;  // element's old index within old parent\n                evt.newIndex;  // element's new index within new parent\n                evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n                evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n                evt.clone // the clone element\n                evt.pullMode;\n                console.log(itemEl)\n                if (evt.to.id===\"sTree2\" && itemEl.type===\"item\") {\n                    alert(\"Ай бля\");\n                }\n            },\n        });\n        console.log(treeElement)\n    },[treeElement])\n    return (\n        <ul ref={treeElement} className={`${styles.tree} list-group m-4`} id=\"tree\">\n            {tree && tree.map((branch) => (\n                <Branch key={getKey(branch)} {...branch} />\n            ))}\n        </ul>\n    )\n}"]},"metadata":{},"sourceType":"module"}