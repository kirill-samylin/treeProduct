{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getProducts } from \"../../services/api\";\nimport { product, category, tree } from \"../../module\";\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false\n};\nexport const treeAsync = createAsyncThunk(\"tree/getProducts\", async id => {\n  const response = await getProducts(id);\n  return response.data;\n});\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      let items = [];\n\n      if (item.hasOwnProperty(\"active\") && item.active || item.hasOwnProperty(\"disabled\") && !item.disabled) {\n        items = tree.offBranch(state.products);\n      } else {\n        items = tree.onBranch(state.products);\n      }\n\n      const tree2 = category.changeDisabled(item, state.products, status);\n      const list = product.flatten(tree2);\n      state.products = product.tree(tree, list);\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = product.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = product.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      console.log(item);\n      state.products = product.remove(item, state.products);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(treeAsync.pending, state => {\n      state.loading = true;\n    }).addCase(treeAsync.fulfilled, (state, action) => {\n      console.log(action.payload);\n      let list = product.flatten(action.payload);\n      list = product.getPassive(list);\n      const products = product.tree(action.payload, list);\n      state.loading = false;\n      state.products = products;\n      state.list = list;\n    });\n  }\n});\nexport const {\n  changeStatus,\n  changeExpand,\n  insert,\n  remove\n} = treeSlice.actions;\nexport const selectProducts = state => state.tree.products;\nexport default treeSlice.reducer;","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/App/App.slice.js"],"names":["createAsyncThunk","createSlice","getProducts","product","category","tree","initialState","products","list","loading","treeAsync","id","response","data","treeSlice","name","reducers","changeStatus","state","action","item","payload","items","hasOwnProperty","active","disabled","offBranch","onBranch","tree2","changeDisabled","status","flatten","changeExpand","set","expanded","insert","parent_id","product_id","concat","remove","console","log","extraReducers","builder","addCase","pending","fulfilled","getPassive","actions","selectProducts","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getProducts } from \"../../services/api\";\nimport { product, category, tree } from \"../../module\";\n\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false,\n};\n\nexport const treeAsync = createAsyncThunk(\n  \"tree/getProducts\",\n  async (id) => {\n    const response = await getProducts(id);\n    return response.data;\n  }\n);\n\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      let items = [];\n      if (item.hasOwnProperty(\"active\") && item.active || item.hasOwnProperty(\"disabled\") && !item.disabled) {\n        items = tree.offBranch(state.products);\n      } else {\n        items = tree.onBranch(state.products);\n      }\n      const tree2 = category.changeDisabled(item, state.products, status);\n      const list = product.flatten(tree2);\n      state.products = product.tree(tree, list);\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = product.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = product.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      console.log(item)\n      state.products = product.remove(item, state.products);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(treeAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(treeAsync.fulfilled, (state, action) => {\n        console.log(action.payload);\n        let list = product.flatten(action.payload);\n        list = product.getPassive(list);\n        const products = product.tree(action.payload, list);\n        state.loading = false;\n        state.products = products;\n        state.list = list;\n      });\n  },\n});\n\nexport const { changeStatus, changeExpand, insert, remove } = treeSlice.actions;\n\nexport const selectProducts = (state) => state.tree.products;\n\nexport default treeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}