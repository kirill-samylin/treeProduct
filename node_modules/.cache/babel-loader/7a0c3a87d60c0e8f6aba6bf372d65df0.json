{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchTree } from \"./AppApi\";\nimport { product } from \"../../module\";\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const treeAsync = createAsyncThunk(\"tree/fetchTree\", async amount => {\n  const response = await fetchTree(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      state.products = product.setStatus(item, state.products, !item.active);\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = product.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = product.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      console.log(item);\n      state.products = product.remove(item, state.products);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(treeAsync.pending, state => {\n      state.loading = true;\n    }).addCase(treeAsync.fulfilled, (state, action) => {\n      const list = product.flatten(action.payload);\n      const products = product.tree(action.payload, list);\n      state.loading = false;\n      state.products = products;\n      state.list = list;\n    });\n  }\n});\nexport const {\n  changeStatus,\n  changeExpand,\n  insert,\n  remove\n} = treeSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectProducts = state => state.tree.products;\nexport default treeSlice.reducer;","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/App/App.slice.js"],"names":["createAsyncThunk","createSlice","fetchTree","product","initialState","products","list","loading","treeAsync","amount","response","data","treeSlice","name","reducers","changeStatus","state","action","item","payload","setStatus","active","changeExpand","set","expanded","insert","parent_id","product_id","concat","remove","console","log","extraReducers","builder","addCase","pending","fulfilled","flatten","tree","actions","selectProducts","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchTree } from \"./AppApi\";\nimport { product } from \"../../module\";\n\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false,\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const treeAsync = createAsyncThunk(\n  \"tree/fetchTree\",\n  async (amount) => {\n    const response = await fetchTree(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      state.products = product.setStatus(\n        item,\n        state.products,\n        !item.active\n      );\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = product.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = product.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      console.log(item)\n      state.products = product.remove(item, state.products);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(treeAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(treeAsync.fulfilled, (state, action) => {\n        const list = product.flatten(action.payload);\n        const products = product.tree(action.payload, list);\n        state.loading = false;\n        state.products = products;\n        state.list = list;\n      });\n  },\n});\n\nexport const { changeStatus, changeExpand, insert, remove } = treeSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectProducts = (state) => state.tree.products;\n\n\nexport default treeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}