{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/job/foodle-api/src/lk/web/js/react/tree/src/components/ImageCropper/ImageCropperPopup/ImageCropperPopup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useCallback } from \"react\";\nimport styles from \"./ImageCropperPopup.module.css\";\nimport { Popup } from \"../..\";\nimport Cropper from \"react-cropper\";\nimport { Button } from \"react-bootstrap\";\nimport { selectState, selectImage, handleClose, saveImageAsync, getImageUrlAsync } from \"../ImageCropper.slice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ImageCropperPopup = ({\n  cropperOptions,\n  formats\n}) => {\n  _s();\n\n  const cropperRef = useRef(null);\n  const [cropper, setCropper] = useState('');\n  const state = useSelector(selectState);\n  const image = useSelector(selectImage);\n  const dispatch = useDispatch();\n  const onClose = useCallback(() => {\n    dispatch(handleClose());\n  }, [dispatch]);\n  const getCropData = useCallback(() => {\n    if (typeof cropper !== \"undefined\") {\n      const images = [];\n\n      for (let format of formats) {\n        const croppImage = cropper.getCroppedCanvas({\n          width: format.width || 100,\n          height: format.height || 100,\n          imageSmoothingQuality: format.quality || \"high\"\n        }).toDataURL();\n        images.push({\n          blob: new Blob([croppImage], {\n            type: format.type || \"image/png\"\n          }),\n          key: format.key\n        });\n      }\n\n      dispatch(getImageUrlAsync(images));\n    }\n  }, [cropper, formats, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Popup, {\n    className: styles.popup,\n    classContainer: styles.container,\n    opened: state,\n    children: [/*#__PURE__*/_jsxDEV(Cropper, {\n      src: image || \"\",\n      ...cropperOptions,\n      ref: cropperRef,\n      onInitialized: instance => {\n        setCropper(instance);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttons,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: getCropData,\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        variant: \"secondary\",\n        children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImageCropperPopup, \"gcmGycGRinqoxsypecJQx+K+I4s=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ImageCropperPopup;\nexport default ImageCropperPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCropperPopup\");","map":null,"metadata":{},"sourceType":"module"}