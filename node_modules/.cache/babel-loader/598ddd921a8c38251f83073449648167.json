{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/Product/ProductTree/ProductTree.js\";\nimport React, { createRef, useEffect, memo } from \"react\";\nimport { ReactSortable, Sortable, MultiDrag, Swap } from \"react-sortablejs\";\nimport styles from \"./ProductTree.module.css\";\nimport { ProductBranch } from \"../ProductBranch/ProductBranch\";\nimport cn from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProductTree = /*#__PURE__*/memo(_c = ({\n  id,\n  tree,\n  className,\n  expanded\n}) => {\n  function getKey({\n    category_id,\n    product_id,\n    parent_id\n  }) {\n    if (!parent_id) {\n      return category_id;\n    }\n\n    if (!product_id) {\n      return category_id;\n    }\n\n    return product_id;\n  }\n\n  return /*#__PURE__*/_jsxDEV(ReactSortable, {\n    tag: \"ul\",\n    list: tree,\n    children: tree && tree.map(branch => /*#__PURE__*/_jsxDEV(ProductBranch, {\n      product: branch\n    }, getKey(branch), false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n});\n_c2 = ProductTree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProductTree$memo\");\n$RefreshReg$(_c2, \"ProductTree\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Product/ProductTree/ProductTree.js"],"names":["React","createRef","useEffect","memo","ReactSortable","Sortable","MultiDrag","Swap","styles","ProductBranch","cn","ProductTree","id","tree","className","expanded","getKey","category_id","product_id","parent_id","map","branch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,IAAtC,QAAkD,OAAlD;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,IAA7C,QAAyD,kBAAzD;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,OAAOC,EAAP,MAAe,YAAf;;AAEA,OAAO,MAAMC,WAAW,gBAAGR,IAAI,MAAC,CAAC;AAAES,EAAAA,EAAF;AAAMC,EAAAA,IAAN;AAAYC,EAAAA,SAAZ;AAAuBC,EAAAA;AAAvB,CAAD,KAAuC;AAErE,WAASC,MAAT,CAAgB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,GAAhB,EAAwD;AACtD,QAAI,CAACA,SAAL,EAAgB;AACd,aAAOF,WAAP;AACD;;AACD,QAAI,CAACC,UAAL,EAAiB;AACf,aAAOD,WAAP;AACD;;AACD,WAAOC,UAAP;AACD;;AAED,sBACE,QAAC,aAAD;AAAe,IAAA,GAAG,EAAC,IAAnB;AAAwB,IAAA,IAAI,EAAEL,IAA9B;AAAA,cACGA,IAAI,IAAIA,IAAI,CAACO,GAAL,CAAUC,MAAD,iBAChB,QAAC,aAAD;AAAoC,MAAA,OAAO,EAAEA;AAA7C,OAAoBL,MAAM,CAACK,MAAD,CAA1B;AAAA;AAAA;AAAA;AAAA,YADO;AADX;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAnB8B,CAAxB;MAAMV,W","sourcesContent":["import React, { createRef, useEffect, memo } from \"react\";\nimport { ReactSortable, Sortable, MultiDrag, Swap } from \"react-sortablejs\";\nimport styles from \"./ProductTree.module.css\";\nimport { ProductBranch } from \"../ProductBranch/ProductBranch\";\nimport cn from \"classnames\";\n\nexport const ProductTree = memo(({ id, tree, className, expanded }) => {\n  \n  function getKey({ category_id, product_id, parent_id }) {\n    if (!parent_id) {\n      return category_id;\n    }\n    if (!product_id) {\n      return category_id;\n    }\n    return product_id;\n  }\n\n  return (\n    <ReactSortable tag=\"ul\" list={tree} >\n      {tree && tree.map((branch) => (\n        <ProductBranch key={getKey(branch)} product={branch} />\n      ))}\n    </ReactSortable>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}