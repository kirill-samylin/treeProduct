{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchTree } from \"./AppApi\";\nimport { dishes } from \"../../module\";\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const treeAsync = createAsyncThunk(\"tree/fetchTree\", async amount => {\n  const response = await fetchTree(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    changeStatus: (state, action) => {\n      const product = action.payload;\n      state.products = dishes.setStatus(product, state.products, !product.active);\n    },\n    changeExpand: (state, action) => {\n      state.products = dishes.set(action.product, state.products, 'expanded', !action.product.expanded);\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(treeAsync.pending, state => {\n      state.loading = true;\n    }).addCase(treeAsync.fulfilled, (state, action) => {\n      const list = dishes.flatten(action.payload);\n      const products = dishes.tree(action.payload, list);\n      state.loading = false;\n      state.products = products;\n      state.list = list;\n    });\n  }\n});\nexport const {\n  changeStatus,\n  changeExpand\n} = treeSlice.actions; // // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectProducts = state => state.tree.products; // // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectProducts(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default treeSlice.reducer;","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/App/AppSlice.js"],"names":["createAsyncThunk","createSlice","fetchTree","dishes","initialState","products","list","loading","treeAsync","amount","response","data","treeSlice","name","reducers","changeStatus","state","action","product","payload","setStatus","active","changeExpand","set","expanded","extraReducers","builder","addCase","pending","fulfilled","flatten","tree","actions","selectProducts","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB,C,CAMA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAGR,gBAAgB,CACvC,gBADuC,EAEvC,MAAOS,MAAP,IAAkB;AAChB,QAAMC,QAAQ,GAAG,MAAMR,SAAS,CAACO,MAAD,CAAhC,CADgB,CAEhB;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CANsC,CAAlC;AASP,OAAO,MAAMC,SAAS,GAAGX,WAAW,CAAC;AACnCY,EAAAA,IAAI,EAAE,MAD6B;AAEnCT,EAAAA,YAFmC;AAGnC;AACAU,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACAH,MAAAA,KAAK,CAACX,QAAN,GAAiBF,MAAM,CAACiB,SAAP,CACfF,OADe,EAEfF,KAAK,CAACX,QAFS,EAGf,CAACa,OAAO,CAACG,MAHM,CAAjB;AAKD,KARO;AASRC,IAAAA,YAAY,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACX,QAAN,GAAiBF,MAAM,CAACoB,GAAP,CAAWN,MAAM,CAACC,OAAlB,EAA2BF,KAAK,CAACX,QAAjC,EAA2C,UAA3C,EAAuD,CAACY,MAAM,CAACC,OAAP,CAAeM,QAAvE,CAAjB;AACD;AAXO,GAJyB;AAiBnC;AACA;AACAC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWnB,SAAS,CAACoB,OADrB,EAC+BZ,KAAD,IAAW;AACrCA,MAAAA,KAAK,CAACT,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGoB,OAJH,CAIWnB,SAAS,CAACqB,SAJrB,EAIgC,CAACb,KAAD,EAAQC,MAAR,KAAmB;AAC/C,YAAMX,IAAI,GAAGH,MAAM,CAAC2B,OAAP,CAAeb,MAAM,CAACE,OAAtB,CAAb;AACA,YAAMd,QAAQ,GAAGF,MAAM,CAAC4B,IAAP,CAAYd,MAAM,CAACE,OAAnB,EAA4Bb,IAA5B,CAAjB;AACAU,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACAS,MAAAA,KAAK,CAACX,QAAN,GAAiBA,QAAjB;AACAW,MAAAA,KAAK,CAACV,IAAN,GAAaA,IAAb;AACD,KAVH;AAWD;AA/BkC,CAAD,CAA7B;AAkCP,OAAO,MAAM;AAAES,EAAAA,YAAF;AAAgBO,EAAAA;AAAhB,IAAkCV,SAAS,CAACoB,OAAlD,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIjB,KAAD,IAAWA,KAAK,CAACe,IAAN,CAAW1B,QAA7C,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeO,SAAS,CAACsB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchTree } from \"./AppApi\";\nimport { dishes } from \"../../module\";\n\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false,\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const treeAsync = createAsyncThunk(\n  \"tree/fetchTree\",\n  async (amount) => {\n    const response = await fetchTree(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    changeStatus: (state, action) => {\n      const product = action.payload;\n      state.products = dishes.setStatus(\n        product,\n        state.products,\n        !product.active\n      );\n    },\n    changeExpand: (state, action) => {\n      state.products = dishes.set(action.product, state.products, 'expanded', !action.product.expanded);\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(treeAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(treeAsync.fulfilled, (state, action) => {\n        const list = dishes.flatten(action.payload);\n        const products = dishes.tree(action.payload, list);\n        state.loading = false;\n        state.products = products;\n        state.list = list;\n      });\n  },\n});\n\nexport const { changeStatus, changeExpand, } = treeSlice.actions;\n\n// // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectProducts = (state) => state.tree.products;\n\n// // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectProducts(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default treeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}