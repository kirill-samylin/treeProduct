{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect, memo } from \"react\";\nimport styles from \"./Tree.module.css\";\nimport { Category } from \"../\";\nimport cn from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tree = /*#__PURE__*/memo(_c = _s(({\n  id,\n  tree,\n  className,\n  expanded\n}) => {\n  _s();\n\n  const treeElement = /*#__PURE__*/createRef(null);\n  console.log(tree);\n\n  function getKey({\n    category_id,\n    product_id,\n    parent_id\n  }) {\n    if (!parent_id) {\n      return category_id;\n    }\n\n    if (!product_id) {\n      return category_id;\n    }\n\n    return product_id;\n  }\n\n  const onEnd = evt => {\n    const oldIndex = evt.oldIndex;\n    const index = evt.newIndex;\n    const item = evt.item;\n    const parent = evt.to;\n    const oldParent = evt.from;\n    const id = item.dataset.id;\n    const name = item.dataset.name;\n    const categoryId = parent.dataset.id;\n    const oldCategoryId = oldParent.dataset.id;\n    if (oldIndex === index && parent === oldParent) return;\n    console.log({\n      \"id предмета\": id,\n      \"id категории куда суем\": categoryId,\n      \"id категории откуда удаляем\": oldCategoryId,\n      \"index - место куда вставляем\": index,\n      \"oldIndex - место откуда вырезаем\": oldIndex,\n      \"тип\": name\n    });\n  };\n\n  const onMove = evt => {\n    const parent = evt.to;\n    const item = evt.dragged;\n    const category_id = parent.dataset.id;\n    const name = item.dataset.name;\n    if (category_id === \"root\" && name === \"product\") return false;\n    return true;\n  };\n\n  useEffect(() => {\n    window.$(treeElement.current).sortable({\n      fallbackOnBody: false,\n      // selectedClass: styles.selected,\n      // multiDrag: true,\n      group: {\n        name: \"list\"\n      },\n      animation: 200,\n      ghostClass: \"ghost\",\n      handle: \".position\",\n      onEnd,\n      onMove\n    });\n  }, [treeElement]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    ref: treeElement,\n    \"data-id\": id,\n    className: cn(styles.tree, className, \"list-group\", {\n      [styles.open]: expanded\n    }),\n    children: tree && tree.map(branch => /*#__PURE__*/_jsxDEV(Category, {\n      product: branch\n    }, getKey(branch), false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"));\n_c2 = Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree$memo\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js"],"names":["React","createRef","useEffect","memo","styles","Category","cn","Tree","id","tree","className","expanded","treeElement","console","log","getKey","category_id","product_id","parent_id","onEnd","evt","oldIndex","index","newIndex","item","parent","to","oldParent","from","dataset","name","categoryId","oldCategoryId","onMove","dragged","window","$","current","sortable","fallbackOnBody","group","animation","ghostClass","handle","open","map","branch"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, memo } from \"react\";\nimport styles from \"./Tree.module.css\";\nimport { Category } from \"../\";\nimport cn from \"classnames\";\n\nexport const Tree = memo(({ id, tree, className, expanded }) => {\n  const treeElement = createRef(null);\n  console.log(tree)\n  function getKey({ category_id, product_id, parent_id }) {\n    if (!parent_id) {\n      return category_id;\n    }\n    if (!product_id) {\n      return category_id;\n    }\n    return product_id;\n  }\n\n  const onEnd = (evt) => {\n    const oldIndex = evt.oldIndex;\n    const index = evt.newIndex;\n    const item = evt.item;\n    const parent = evt.to;\n    const oldParent = evt.from;\n    const id = item.dataset.id;\n    const name = item.dataset.name;\n    const categoryId = parent.dataset.id;\n    const oldCategoryId = oldParent.dataset.id;\n\n    if (oldIndex === index && parent === oldParent) return;\n\n    console.log({\n      \"id предмета\": id,\n      \"id категории куда суем\": categoryId,\n      \"id категории откуда удаляем\": oldCategoryId,\n      \"index - место куда вставляем\": index,\n      \"oldIndex - место откуда вырезаем\": oldIndex,\n      \"тип\": name,\n    });\n  };\n\n  const onMove = (evt) => {\n    const parent = evt.to;\n    const item = evt.dragged;\n    const category_id = parent.dataset.id;\n    const name = item.dataset.name;\n    if (category_id === \"root\" && name === \"product\") return false;\n    return true;\n  };\n\n  useEffect(() => {\n    window.$(treeElement.current).sortable({\n      fallbackOnBody: false,\n      // selectedClass: styles.selected,\n      // multiDrag: true,\n      group: {\n        name: \"list\",\n      },\n      animation: 200,\n      ghostClass: \"ghost\",\n      handle: \".position\",\n      onEnd,\n      onMove,\n    });\n  }, [treeElement]);\n\n  return (\n    <ul\n      ref={treeElement}\n      data-id={id}\n      className={cn(styles.tree, className, \"list-group\", {\n        [styles.open]: expanded,\n      })}\n    >\n      {tree &&\n        tree.map((branch) =>\n          <Category key={getKey(branch)} product={branch} />\n        )}\n    </ul>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}