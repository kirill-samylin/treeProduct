{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { saveImage } from \"../../services/api\";\nconst initialState = {\n  isOpen: false,\n  image: null\n};\nexport const saveImageAsync = createAsyncThunk(\"tree/saveImage\", async data => {\n  const response = await saveImage(data);\n  return response.data;\n});\nexport const popupCropperSlice = createSlice({\n  name: \"popupCropper\",\n  initialState,\n  reducers: {\n    handleClose: state => {\n      state.isOpen = false;\n      state.image = null;\n    },\n    handleOpen: (state, action) => {\n      state.image = action.payload;\n      state.isOpen = true;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(saveImageAsync.pending, state => {\n      state.loading = true;\n    }).addCase(saveImageAsync.fulfilled, (state, action) => {\n      const list = product.flatten(action.payload);\n      const products = product.tree(action.payload, list);\n      state.loading = false;\n      state.products = products;\n      state.list = list;\n    });\n  }\n});\nexport const {\n  handleClose,\n  handleOpen\n} = popupCropperSlice.actions;\nexport const selectState = state => state.popupCropper.isOpen;\nexport const selectImage = state => state.popupCropper.image;\nexport default popupCropperSlice.reducer;","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/PopupCropper/PopupCropper.slice.js"],"names":["createSlice","createAsyncThunk","saveImage","initialState","isOpen","image","saveImageAsync","data","response","popupCropperSlice","name","reducers","handleClose","state","handleOpen","action","payload","extraReducers","builder","addCase","pending","loading","fulfilled","list","product","flatten","products","tree","actions","selectState","popupCropper","selectImage","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA6C,kBAA7C;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,KADW;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAKA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAC5C,gBAD4C,EAE5C,MAAOM,IAAP,IAAgB;AACd,QAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACK,IAAD,CAAhC;AACA,SAAOC,QAAQ,CAACD,IAAhB;AACD,CAL2C,CAAvC;AAQP,OAAO,MAAME,iBAAiB,GAAGT,WAAW,CAAC;AAC3CU,EAAAA,IAAI,EAAE,cADqC;AAE3CP,EAAAA,YAF2C;AAG3CQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAGC,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACT,MAAN,GAAe,KAAf;AACAS,MAAAA,KAAK,CAACR,KAAN,GAAc,IAAd;AACD,KAJO;AAKRS,IAAAA,UAAU,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC7BF,MAAAA,KAAK,CAACR,KAAN,GAAcU,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACT,MAAN,GAAe,IAAf;AACD;AARO,GAHiC;AAa3Ca,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWb,cAAc,CAACc,OAD1B,EACoCP,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACQ,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGF,OAJH,CAIWb,cAAc,CAACgB,SAJ1B,EAIqC,CAACT,KAAD,EAAQE,MAAR,KAAmB;AACpD,YAAMQ,IAAI,GAAGC,OAAO,CAACC,OAAR,CAAgBV,MAAM,CAACC,OAAvB,CAAb;AACA,YAAMU,QAAQ,GAAGF,OAAO,CAACG,IAAR,CAAaZ,MAAM,CAACC,OAApB,EAA6BO,IAA7B,CAAjB;AACAV,MAAAA,KAAK,CAACQ,OAAN,GAAgB,KAAhB;AACAR,MAAAA,KAAK,CAACa,QAAN,GAAiBA,QAAjB;AACAb,MAAAA,KAAK,CAACU,IAAN,GAAaA,IAAb;AACD,KAVH;AAWD;AAzB0C,CAAD,CAArC;AA4BP,OAAO,MAAM;AAAEX,EAAAA,WAAF;AAAeE,EAAAA;AAAf,IAA8BL,iBAAiB,CAACmB,OAAtD;AAEP,OAAO,MAAMC,WAAW,GAAIhB,KAAD,IAAWA,KAAK,CAACiB,YAAN,CAAmB1B,MAAlD;AACP,OAAO,MAAM2B,WAAW,GAAIlB,KAAD,IAAWA,KAAK,CAACiB,YAAN,CAAmBzB,KAAlD;AAEP,eAAeI,iBAAiB,CAACuB,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport { saveImage } from \"../../services/api\";\n\nconst initialState = {\n  isOpen: false,\n  image: null,\n};\n\nexport const saveImageAsync = createAsyncThunk(\n  \"tree/saveImage\",\n  async (data) => {\n    const response = await saveImage(data);\n    return response.data;\n  }\n);\n\nexport const popupCropperSlice = createSlice({\n  name: \"popupCropper\",\n  initialState,\n  reducers: {\n    handleClose: (state) => {\n      state.isOpen = false;\n      state.image = null;\n    },\n    handleOpen: (state, action) => {\n      state.image = action.payload;\n      state.isOpen = true;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(saveImageAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(saveImageAsync.fulfilled, (state, action) => {\n        const list = product.flatten(action.payload);\n        const products = product.tree(action.payload, list);\n        state.loading = false;\n        state.products = products;\n        state.list = list;\n      });\n  },\n});\n\nexport const { handleClose, handleOpen } = popupCropperSlice.actions;\n\nexport const selectState = (state) => state.popupCropper.isOpen;\nexport const selectImage = (state) => state.popupCropper.image;\n\nexport default popupCropperSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}