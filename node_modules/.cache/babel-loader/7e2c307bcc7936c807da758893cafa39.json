{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/ImageCropper/ImageCropper.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"cropperjs/dist/cropper.css\";\nimport { Form } from \"react-bootstrap\";\nimport { handleOpen } from \"./ImageCropper.slice\";\nimport ImageCropperPreview from './ImageCropperPreview/ImageCropperPreview';\nimport ImageCropperPopup from './ImageCropperPopup/ImageCropperPopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ImageCropper = ({\n  register\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n\n  const handleCropper = file => {\n    const isImage = /^image\\/\\w+$/.test(file.type);\n    if (!isImage) return;\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      dispatch(cropperSlice.handleOpen(reader.result));\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  const onChange = e => {\n    e.preventDefault();\n    let files;\n\n    if (e.dataTransfer) {\n      files = e.dataTransfer.files;\n    } else if (e.target) {\n      files = e.target.files;\n    }\n\n    if (files.length) {\n      handleCropper(files[0]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ImageCropperPreview, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Form.File, {\n        label: \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430\",\n        ...register(\"image\"),\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageCropperPopup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ImageCropper, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ImageCropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCropper\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/ImageCropper/ImageCropper.js"],"names":["React","useDispatch","Form","handleOpen","ImageCropperPreview","ImageCropperPopup","ImageCropper","register","dispatch","handleCropper","file","isImage","test","type","reader","FileReader","onload","cropperSlice","result","readAsDataURL","onChange","e","preventDefault","files","dataTransfer","target","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,4BAAP;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,UAAT,QAA0B,sBAA1B;AACA,OAAOC,mBAAP,MAAgC,2CAAhC;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAE5C,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,aAAa,GAAIC,IAAD,IAAU;AAC9B,UAAMC,OAAO,GAAG,eAAeC,IAAf,CAAoBF,IAAI,CAACG,IAAzB,CAAhB;AACA,QAAI,CAACF,OAAL,EAAc;AACd,UAAMG,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AACpBR,MAAAA,QAAQ,CAACS,YAAY,CAACd,UAAb,CAAwBW,MAAM,CAACI,MAA/B,CAAD,CAAR;AACD,KAFD;;AAGAJ,IAAAA,MAAM,CAACK,aAAP,CAAqBT,IAArB;AACD,GARD;;AAUA,QAAMU,QAAQ,GAAIC,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,KAAJ;;AACA,QAAIF,CAAC,CAACG,YAAN,EAAoB;AAClBD,MAAAA,KAAK,GAAGF,CAAC,CAACG,YAAF,CAAeD,KAAvB;AACD,KAFD,MAEO,IAAIF,CAAC,CAACI,MAAN,EAAc;AACnBF,MAAAA,KAAK,GAAGF,CAAC,CAACI,MAAF,CAASF,KAAjB;AACD;;AACD,QAAIA,KAAK,CAACG,MAAV,EAAkB;AAChBjB,MAAAA,aAAa,CAACc,KAAK,CAAC,CAAD,CAAN,CAAb;AACD;AACF,GAXD;;AAaA,sBACE;AAAA,4BACE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD,CAAM,KAAN;AAAA,6BACE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,KAAK,EAAC,kDADR;AAAA,WAEMhB,QAAQ,CAAC,OAAD,CAFd;AAGE,QAAA,QAAQ,EAAEa;AAHZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eASE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAaD,CAxCM;;GAAMd,Y;UAEML,W;;;KAFNK,Y","sourcesContent":["import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"cropperjs/dist/cropper.css\";\nimport { Form } from \"react-bootstrap\";\nimport { handleOpen }from \"./ImageCropper.slice\";\nimport ImageCropperPreview from './ImageCropperPreview/ImageCropperPreview';\nimport ImageCropperPopup from './ImageCropperPopup/ImageCropperPopup';\n\nexport const ImageCropper = ({ register }) => {\n\n  const dispatch = useDispatch();\n\n  const handleCropper = (file) => {\n    const isImage = /^image\\/\\w+$/.test(file.type);\n    if (!isImage) return;\n    const reader = new FileReader();\n    reader.onload = () => {\n      dispatch(cropperSlice.handleOpen(reader.result));\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const onChange = (e) => {\n    e.preventDefault();\n    let files;\n    if (e.dataTransfer) {\n      files = e.dataTransfer.files;\n    } else if (e.target) {\n      files = e.target.files;\n    }\n    if (files.length) {\n      handleCropper(files[0]);\n    }\n  };\n\n  return (\n    <>\n      <ImageCropperPreview />\n      <Form.Group>\n        <Form.File\n          label=\"Картинка\"\n          {...register(\"image\")}\n          onChange={onChange}\n        />\n      </Form.Group>\n      <ImageCropperPopup />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}