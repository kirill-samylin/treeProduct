{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect } from 'react';\nimport styles from './Tree.module.css';\nimport './Tree.css';\nimport { Branch } from '../';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tree = ({\n  tree\n}) => {\n  _s();\n\n  const treeElement = /*#__PURE__*/createRef(null);\n\n  function getKey({\n    category_id,\n    product_id,\n    parent_id\n  }) {\n    if (!parent_id) {\n      return category_id;\n    }\n\n    if (!product_id) {\n      return category_id;\n    }\n\n    return product_id;\n  }\n\n  useEffect(() => {\n    window$(treeElement).sortable({\n      // fallbackOnBody: false,\n      group: 'list',\n      animation: 200,\n      ghostClass: 'ghost',\n      onSort: reportActivity,\n      handle: '.tree__category-position',\n      onStart: saveTree,\n      onEnd: function (\n      /**Event*/\n      evt) {\n        var itemEl = evt.item; // dragged HTMLElement\n\n        evt.to; // target list\n\n        evt.from; // previous list\n\n        evt.oldIndex; // element's old index within old parent\n\n        evt.newIndex; // element's new index within new parent\n\n        evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n\n        evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n\n        evt.clone; // the clone element\n\n        evt.pullMode;\n        console.log(itemEl);\n\n        if (evt.to.id === \"sTree2\" && itemEl.type === \"item\") {\n          alert(\"Ай бля\");\n          const nowTree = document.getElementById(\"sTree2\");\n          nowTree.replaceWith(stor);\n          start();\n        }\n\n        console.log(evt.to, evt.from);\n        console.log(evt.oldIndex, evt.newIndex);\n        console.log(stor);\n      }\n    });\n    console.log(treeElement);\n  }, [treeElement]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    ref: treeElement,\n    className: `${styles.tree} list-group m-4`,\n    id: \"tree\",\n    children: tree && tree.map(branch => /*#__PURE__*/_jsxDEV(Branch, { ...branch\n    }, getKey(branch), false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tree, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js"],"names":["React","createRef","useEffect","styles","Branch","Tree","tree","treeElement","getKey","category_id","product_id","parent_id","window$","sortable","group","animation","ghostClass","onSort","reportActivity","handle","onStart","saveTree","onEnd","evt","itemEl","item","to","from","oldIndex","newIndex","oldDraggableIndex","newDraggableIndex","clone","pullMode","console","log","id","type","alert","nowTree","document","getElementById","replaceWith","stor","start","map","branch"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect } from 'react';\nimport styles from'./Tree.module.css';\nimport './Tree.css';\nimport { Branch } from '../';\n\n\nexport const Tree = ({ tree }) => {\n    const treeElement = createRef(null);\n    function getKey({ category_id, product_id, parent_id, }) {\n        if (!parent_id) {\n            return category_id\n        } \n        if (!product_id) {\n            return category_id;\n        }\n        return product_id;\n    }\n    useEffect(() => {\n        window$(treeElement).sortable({ \n            // fallbackOnBody: false,\n            group: 'list',\n            animation: 200,\n            ghostClass: 'ghost',\n            onSort: reportActivity,\n            handle: '.tree__category-position',\n            onStart: saveTree,\n            onEnd: function (/**Event*/evt) {\n                var itemEl = evt.item;  // dragged HTMLElement\n                evt.to;    // target list\n                evt.from;  // previous list\n                evt.oldIndex;  // element's old index within old parent\n                evt.newIndex;  // element's new index within new parent\n                evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n                evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n                evt.clone // the clone element\n                evt.pullMode;\n                console.log(itemEl)\n                if (evt.to.id===\"sTree2\" && itemEl.type===\"item\") {\n                    alert(\"Ай бля\");\n                    const nowTree = document.getElementById(\"sTree2\");\n                    nowTree.replaceWith(stor);\n                    start();\n                }\n                console.log(evt.to, evt.from)\n                console.log(evt.oldIndex, evt.newIndex)\n                console.log(stor);\n            },\n        });\n        console.log(treeElement)\n    },[treeElement])\n    return (\n        <ul ref={treeElement} className={`${styles.tree} list-group m-4`} id=\"tree\">\n            {tree && tree.map((branch) => (\n                <Branch key={getKey(branch)} {...branch} />\n            ))}\n        </ul>\n    )\n}"]},"metadata":{},"sourceType":"module"}