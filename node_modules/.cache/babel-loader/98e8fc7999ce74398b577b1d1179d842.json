{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getProducts } from \"../../services/api\";\nimport { tree } from \"../../utils\";\nimport { localeProducts } from \"../../services/localeProducts\";\nconst initialState = {\n  products: [],\n  loading: false\n};\nexport const treeAsync = createAsyncThunk(\"tree/getProducts\", async id => {\n  if (id === \"test\") {\n    return localeProducts;\n  }\n\n  return await getProducts(id);\n});\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n\n      if (item.hasOwnProperty(\"active\") && item.active || item.hasOwnProperty(\"disabled\") && !item.disabled) {\n        state.products = tree.offBranch(item, state.products);\n      } else {\n        state.products = tree.onBranch(item, state.products);\n      }\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = tree.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n      state.products = tree.insert(item, state.products);\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      state.products = tree.remove(item, state.products);\n    },\n    move: (state, action) => {\n      const item = action.payload;\n      tree.move(item, state.products);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(treeAsync.pending, state => {\n      state.loading = true;\n    }).addCase(treeAsync.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.products = action.payload;\n      } else {\n        state.products = localeProducts;\n      }\n\n      state.loading = false;\n    }).addCase(treeAsync.rejected, state => {\n      state.products = localeProducts;\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  changeStatus,\n  changeExpand,\n  insert,\n  remove\n} = treeSlice.actions;\nexport const selectTree = state => {\n  const items = state.tree.products;\n  let list = tree.flatten(items);\n  list = tree.passiveMode(list);\n  const products = tree.get(items, list);\n  return {\n    list,\n    products\n  };\n};\nexport default treeSlice.reducer;","map":null,"metadata":{},"sourceType":"module"}