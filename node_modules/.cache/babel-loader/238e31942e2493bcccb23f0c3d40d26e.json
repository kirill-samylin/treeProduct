{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/ImageCropper/ImageCropperPopup/ImageCropperPopup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport styles from \"./ImageCropperPopup.module.css\";\nimport { Popup } from \"../..\";\nimport Cropper from \"react-cropper\";\nimport { Button } from \"react-bootstrap\";\nimport * as cropperSlice from \"../ImageCropper.slice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {\n  width: 750,\n  height: 470\n};\nconst options = {\n  aspectRatio: 75 / 47,\n  autoCropArea: 1,\n  style\n};\n\nconst ImageCropperPopup = () => {\n  _s();\n\n  const cropperRef = useRef(null);\n  const [cropper, setCropper] = useState('');\n  const state = useSelector(cropperSlice.selectState);\n  const image = useSelector(cropperSlice.selectImage);\n  const dispatch = useDispatch();\n\n  const onClose = () => {\n    console.log('onClose', state, image);\n    dispatch(cropperSlice.handleClose());\n  };\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      const croppImage = cropper.getCroppedCanvas().toDataURL();\n      const formData = new FormData();\n      const blob = new Blob([croppImage], {\n        type: \"image/png\"\n      });\n      formData.append(\"image\", blob);\n      dispatch(cropperSlice.saveImageAsync(formData));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Popup, {\n    className: styles.popup,\n    classContainer: styles.container,\n    opened: state,\n    children: [/*#__PURE__*/_jsxDEV(Cropper, {\n      src: image || \"\",\n      ...options,\n      ref: cropperRef,\n      onInitialized: instance => {\n        setCropper(instance);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttons,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: getCropData,\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        variant: \"secondary\",\n        children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImageCropperPopup, \"uY/qCSZUUxvIWD0ErvKOugm4A8A=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ImageCropperPopup;\nexport default ImageCropperPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCropperPopup\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/ImageCropper/ImageCropperPopup/ImageCropperPopup.js"],"names":["React","useRef","useState","styles","Popup","Cropper","Button","cropperSlice","useSelector","useDispatch","style","width","height","options","aspectRatio","autoCropArea","ImageCropperPopup","cropperRef","cropper","setCropper","state","selectState","image","selectImage","dispatch","onClose","console","log","handleClose","getCropData","croppImage","getCroppedCanvas","toDataURL","formData","FormData","blob","Blob","type","append","saveImageAsync","popup","container","instance","buttons"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,KAAKC,YAAZ,MAA8B,uBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,GADK;AAEZC,EAAAA,MAAM,EAAE;AAFI,CAAd;AAKA,MAAMC,OAAO,GAAG;AACdC,EAAAA,WAAW,EAAE,KAAK,EADJ;AAEdC,EAAAA,YAAY,EAAE,CAFA;AAGdL,EAAAA;AAHc,CAAhB;;AAMA,MAAMM,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAMC,UAAU,GAAGhB,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM,CAAEiB,OAAF,EAAWC,UAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMkB,KAAK,GAAGZ,WAAW,CAACD,YAAY,CAACc,WAAd,CAAzB;AACA,QAAMC,KAAK,GAAGd,WAAW,CAACD,YAAY,CAACgB,WAAd,CAAzB;AACA,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;;AAEA,QAAMgB,OAAO,GAAG,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBP,KAAvB,EAA8BE,KAA9B;AACAE,IAAAA,QAAQ,CAACjB,YAAY,CAACqB,WAAb,EAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAI,OAAOX,OAAP,KAAmB,WAAvB,EAAoC;AAClC,YAAMY,UAAU,GAAGZ,OAAO,CAACa,gBAAR,GAA2BC,SAA3B,EAAnB;AACA,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACN,UAAD,CAAT,EAAuB;AAAEO,QAAAA,IAAI,EAAE;AAAR,OAAvB,CAAb;AACAJ,MAAAA,QAAQ,CAACK,MAAT,CAAgB,OAAhB,EAAyBH,IAAzB;AACAX,MAAAA,QAAQ,CAACjB,YAAY,CAACgC,cAAb,CAA4BN,QAA5B,CAAD,CAAR;AACD;AACF,GARD;;AAUA,sBACE,QAAC,KAAD;AACE,IAAA,SAAS,EAAE9B,MAAM,CAACqC,KADpB;AAEE,IAAA,cAAc,EAAErC,MAAM,CAACsC,SAFzB;AAGE,IAAA,MAAM,EAAErB,KAHV;AAAA,4BAKE,QAAC,OAAD;AACE,MAAA,GAAG,EAAEE,KAAK,IAAI,EADhB;AAAA,SAEMT,OAFN;AAGE,MAAA,GAAG,EAAEI,UAHP;AAIE,MAAA,aAAa,EAAGyB,QAAD,IAAc;AAC3BvB,QAAAA,UAAU,CAACuB,QAAD,CAAV;AACD;AANH;AAAA;AAAA;AAAA;AAAA,YALF,eAaE;AAAK,MAAA,SAAS,EAAEvC,MAAM,CAACwC,OAAvB;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEd,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEJ,OAAjB;AAA0B,QAAA,OAAO,EAAC,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA7CD;;GAAMT,iB;UAIUR,W,EACAA,W,EACGC,W;;;KANbO,iB;AA+CN,eAAeA,iBAAf","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport styles from \"./ImageCropperPopup.module.css\";\nimport { Popup } from \"../..\";\nimport Cropper from \"react-cropper\";\nimport { Button } from \"react-bootstrap\";\nimport * as cropperSlice from \"../ImageCropper.slice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nconst style = {\n  width: 750,\n  height: 470,\n};\n\nconst options = {\n  aspectRatio: 75 / 47,\n  autoCropArea: 1,\n  style,\n};\n\nconst ImageCropperPopup = () => {\n  const cropperRef = useRef(null);\n  const [ cropper, setCropper ] = useState('');\n\n  const state = useSelector(cropperSlice.selectState);\n  const image = useSelector(cropperSlice.selectImage);\n  const dispatch = useDispatch();\n  \n  const onClose = () => {\n    console.log('onClose', state, image)\n    dispatch(cropperSlice.handleClose());\n  };\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      const croppImage = cropper.getCroppedCanvas().toDataURL();\n      const formData = new FormData();\n      const blob = new Blob([croppImage], { type: \"image/png\" });\n      formData.append(\"image\", blob);\n      dispatch(cropperSlice.saveImageAsync(formData));\n    }\n  };\n\n  return (\n    <Popup\n      className={styles.popup}\n      classContainer={styles.container}\n      opened={state}\n    >\n      <Cropper\n        src={image || \"\"}\n        {...options}\n        ref={cropperRef}\n        onInitialized={(instance) => {\n          setCropper(instance);\n        }}\n      />\n      <div className={styles.buttons}>\n        <Button onClick={getCropData}>Добавить</Button>\n        <Button onClick={onClose} variant=\"secondary\">\n          Отмена\n        </Button>\n      </div>\n    </Popup>\n  );\n};\n\nexport default ImageCropperPopup;"]},"metadata":{},"sourceType":"module"}