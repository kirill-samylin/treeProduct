{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect, memo } from 'react';\nimport styles from './Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tree = /*#__PURE__*/memo(_c = _s(({\n  tree,\n  className,\n  expanded\n}) => {\n  _s();\n\n  const treeElement = /*#__PURE__*/createRef(null);\n\n  function getKey({\n    category_id,\n    product_id,\n    parent_id\n  }) {\n    if (!parent_id) {\n      return category_id;\n    }\n\n    if (!product_id) {\n      return category_id;\n    }\n\n    return product_id;\n  }\n\n  useEffect(() => {\n    window.$(treeElement.current).sortable({\n      // fallbackOnBody: false,\n      group: 'list',\n      animation: 200,\n      ghostClass: 'ghost',\n      handle: '.position',\n      onSort: reportActivity\n    });\n  }, [treeElement]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    ref: treeElement,\n    className: cn(styles.tree, className, 'list-group', {\n      [styles.open]: expanded\n    }),\n    children: tree && tree.map(branch => /*#__PURE__*/_jsxDEV(Branch, {\n      product: branch\n    }, getKey(branch), false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"));\n_c2 = Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree$memo\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js"],"names":["React","createRef","useEffect","memo","styles","Branch","cn","Tree","tree","className","expanded","treeElement","getKey","category_id","product_id","parent_id","window","$","current","sortable","group","animation","ghostClass","handle","onSort","reportActivity","open","map","branch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,IAAtC,QAAkD,OAAlD;AACA,OAAOC,MAAP,MAAkB,mBAAlB;AACA,SAASC,MAAT,QAAuB,KAAvB;AACA,OAAOC,EAAP,MAAe,YAAf;;AAEA,OAAO,MAAMC,IAAI,gBAAGJ,IAAI,SAAC,CAAC;AAAEK,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA;AAAnB,CAAD,KAAkC;AAAA;;AACvD,QAAMC,WAAW,gBAAGV,SAAS,CAAC,IAAD,CAA7B;;AAEA,WAASW,MAAT,CAAgB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,GAAhB,EAAyD;AACrD,QAAI,CAACA,SAAL,EAAgB;AACZ,aAAOF,WAAP;AACH;;AACD,QAAI,CAACC,UAAL,EAAiB;AACb,aAAOD,WAAP;AACH;;AACD,WAAOC,UAAP;AACH;;AACDZ,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,MAAM,CAACC,CAAP,CAASN,WAAW,CAACO,OAArB,EAA8BC,QAA9B,CAAuC;AACnC;AAEAC,MAAAA,KAAK,EAAE,MAH4B;AAInCC,MAAAA,SAAS,EAAE,GAJwB;AAKnCC,MAAAA,UAAU,EAAE,OALuB;AAMnCC,MAAAA,MAAM,EAAE,WAN2B;AAOnCC,MAAAA,MAAM,EAAEC;AAP2B,KAAvC;AASH,GAVQ,EAUN,CAACd,WAAD,CAVM,CAAT;AAYA,sBACI;AAAI,IAAA,GAAG,EAAEA,WAAT;AAAsB,IAAA,SAAS,EAAEL,EAAE,CAACF,MAAM,CAACI,IAAR,EAAcC,SAAd,EAAyB,YAAzB,EAAuC;AACtE,OAACL,MAAM,CAACsB,IAAR,GAAehB;AADuD,KAAvC,CAAnC;AAAA,cAGKF,IAAI,IAAIA,IAAI,CAACmB,GAAL,CAAUC,MAAD,iBACd,QAAC,MAAD;AAEI,MAAA,OAAO,EAAEA;AAFb,OACShB,MAAM,CAACgB,MAAD,CADf;AAAA;AAAA;AAAA;AAAA,YADK;AAHb;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CApCuB,kCAAjB;MAAMrB,I","sourcesContent":["import React, { createRef, useEffect, memo } from 'react';\nimport styles from'./Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\n\nexport const Tree = memo(({ tree, className, expanded}) => {\n    const treeElement = createRef(null);\n    \n    function getKey({ category_id, product_id, parent_id, }) {\n        if (!parent_id) {\n            return category_id\n        } \n        if (!product_id) {\n            return category_id;\n        }\n        return product_id;\n    }\n    useEffect(() => {\n        window.$(treeElement.current).sortable({ \n            // fallbackOnBody: false,\n            \n            group: 'list',\n            animation: 200,\n            ghostClass: 'ghost',\n            handle: '.position',\n            onSort: reportActivity,\n        });\n    }, [treeElement]);\n\n    return (\n        <ul ref={treeElement} className={cn(styles.tree, className, 'list-group', {\n            [styles.open]: expanded,\n        })}>\n            {tree && tree.map((branch) => (\n                <Branch \n                    key={getKey(branch)} \n                    product={branch}\n                />\n            ))}\n        </ul>\n    )\n});"]},"metadata":{},"sourceType":"module"}