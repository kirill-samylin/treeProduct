{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/App/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { Tree } from '../';\nimport { testProductArray } from '../../utils';\nimport { dishes } from '../../module';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const [list, setList] = useState([]);\n  const tree = useMemo(() => {\n    return dishes.tree(products, list);\n  }, [products, list]);\n\n  const handleStatus = product => {\n    setProducts(dishes.setStatus(product, products, !product.active));\n  };\n\n  const handleExpand = product => {\n    //console.log(dishes.set(product, tree, 'expanded', !product.expanded ));\n    setProducts(dishes.set(product, products, 'expanded', !product.expanded));\n  };\n\n  useEffect(() => {\n    const list = dishes.flatten(testProductArray);\n    const products = dishes.tree(testProductArray, list);\n    setList(list);\n    setProducts(products);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: products && products.length ? /*#__PURE__*/_jsxDEV(Tree, {\n      tree: products,\n      handleStatus: handleStatus,\n      handleExpand: handleExpand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this) : null\n  }, void 0, false);\n};\n\n_s(App, \"RKBudmNPw6Iq/Tn2BKs3fmGyftc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/App/App.js"],"names":["React","useState","useMemo","useEffect","useCallback","Tree","testProductArray","dishes","App","products","setProducts","list","setList","tree","handleStatus","product","setStatus","active","handleExpand","set","expanded","flatten","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,EAA8CC,WAA9C,QAAiE,OAAjE;AACA,SAASC,IAAT,QAAqB,KAArB;AACA,SACIC,gBADJ,QAEO,aAFP;AAGA,SAASC,MAAT,QAAuB,cAAvB;;;AAEA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMY,IAAI,GAAGX,OAAO,CAAC,MAAM;AACvB,WAAOK,MAAM,CAACM,IAAP,CAAYJ,QAAZ,EAAsBE,IAAtB,CAAP;AACH,GAFmB,EAEjB,CAAEF,QAAF,EAAYE,IAAZ,CAFiB,CAApB;;AAIA,QAAMG,YAAY,GAAIC,OAAD,IAAa;AAC9BL,IAAAA,WAAW,CAACH,MAAM,CAACS,SAAP,CAAiBD,OAAjB,EAA0BN,QAA1B,EAAoC,CAACM,OAAO,CAACE,MAA7C,CAAD,CAAX;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAIH,OAAD,IAAa;AAC9B;AACAL,IAAAA,WAAW,CAACH,MAAM,CAACY,GAAP,CAAWJ,OAAX,EAAoBN,QAApB,EAA8B,UAA9B,EAA0C,CAACM,OAAO,CAACK,QAAnD,CAAD,CAAX;AACH,GAHD;;AAKAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,IAAI,GAAGJ,MAAM,CAACc,OAAP,CAAef,gBAAf,CAAb;AACA,UAAMG,QAAQ,GAAGF,MAAM,CAACM,IAAP,CAAYP,gBAAZ,EAA8BK,IAA9B,CAAjB;AACAC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GALQ,EAKN,EALM,CAAT;AAOA,sBACI;AAAA,cACKA,QAAQ,IAAIA,QAAQ,CAACa,MAArB,gBACG,QAAC,IAAD;AACI,MAAA,IAAI,EAAEb,QADV;AAEI,MAAA,YAAY,EAAEK,YAFlB;AAGI,MAAA,YAAY,EAAEI;AAHlB;AAAA;AAAA;AAAA;AAAA,YADH,GAMG;AAPR,mBADJ;AAYH,CApCM;;GAAMV,G;;KAAAA,G","sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { Tree } from '../'\nimport { \n    testProductArray,\n} from '../../utils';\nimport { dishes } from '../../module';\n\nexport const App = () => {\n    const [products, setProducts] = useState([]);\n    const [list, setList] = useState([]);\n    \n    const tree = useMemo(() => {\n        return dishes.tree(products, list);\n    }, [ products, list ]);\n    \n    const handleStatus = (product) => {\n        setProducts(dishes.setStatus(product, products, !product.active));\n    }\n\n    const handleExpand = (product) => {\n        //console.log(dishes.set(product, tree, 'expanded', !product.expanded ));\n        setProducts(dishes.set(product, products, 'expanded', !product.expanded ));\n    }\n\n    useEffect(() => {\n        const list = dishes.flatten(testProductArray);\n        const products = dishes.tree(testProductArray, list);\n        setList(list);\n        setProducts(products);\n    }, [])\n    \n    return (\n        <>\n            {products && products.length ? \n                <Tree \n                    tree={products} \n                    handleStatus={handleStatus}\n                    handleExpand={handleExpand}\n                /> : \n                null\n            }\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}