{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/PopupCropper/PopupCropper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport styles from \"./PopupCropper.module.css\";\nimport cn from \"classnames\";\nimport { Popup } from \"../\";\nimport { Form, Button } from \"react-bootstrap\";\nimport * as cropperSlice from \"./PopupCropper.slice\";\nimport PopupCropperPreview from './PopupCropperPreview/PopupCropperPreview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  width: 750,\n  height: 470\n};\nconst options = {\n  aspectRatio: 75 / 47,\n  autoCropArea: 1,\n  style\n};\nexport const PopupCropper = ({\n  register\n}) => {\n  _s();\n\n  const [cropper, setCropper] = useState();\n  const cropperRef = useRef(null);\n  const dispatch = useDispatch();\n  const state = useSelector(cropperSlice.selectState);\n  const image = useSelector(cropperSlice.selectImage);\n  const url = useSelector(cropperSlice.selectUrl);\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      const croppImage = cropper.getCroppedCanvas().toDataURL();\n      const formData = new FormData();\n      const blob = new Blob([croppImage], {\n        type: \"image/png\"\n      });\n      formData.append(\"image\", blob);\n      dispatch(cropperSlice.saveImageAsync(formData));\n    }\n  };\n\n  const onClose = () => {\n    dispatch(cropperSlice.handleClose());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PopupCropperPreview, {\n      url: url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Form.File, {\n        label: \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430\",\n        ...register(\"image\"),\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      className: styles.popup,\n      classContainer: styles.container,\n      opened: state,\n      children: [/*#__PURE__*/_jsxDEV(Cropper, {\n        src: image || '',\n        ...options,\n        ref: cropperRef,\n        onInitialized: instance => {\n          setCropper(instance);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttons,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: getCropData,\n          children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onClose,\n          variant: \"secondary\",\n          children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PopupCropper, \"FqqQ1NnYp6pT6dv5oqZ9qisMDjM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = PopupCropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopupCropper\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/PopupCropper/PopupCropper.js"],"names":["React","useRef","useState","useSelector","useDispatch","Cropper","styles","cn","Popup","Form","Button","cropperSlice","PopupCropperPreview","style","width","height","options","aspectRatio","autoCropArea","PopupCropper","register","cropper","setCropper","cropperRef","dispatch","state","selectState","image","selectImage","url","selectUrl","getCropData","croppImage","getCroppedCanvas","toDataURL","formData","FormData","blob","Blob","type","append","saveImageAsync","onClose","handleClose","onChange","popup","container","instance","buttons"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport styles from \"./PopupCropper.module.css\";\nimport cn from \"classnames\";\nimport { Popup } from \"../\";\nimport { Form, Button } from \"react-bootstrap\";\nimport * as cropperSlice from \"./PopupCropper.slice\";\nimport PopupCropperPreview from './PopupCropperPreview/PopupCropperPreview';\nconst style = {\n  width: 750,\n  height: 470,\n};\n\nconst options = {\n  aspectRatio: 75 / 47,\n  autoCropArea: 1,\n  style,\n};\n\nexport const PopupCropper = ({ register }) => {\n  const [ cropper, setCropper ] = useState();\n\n  const cropperRef = useRef(null);\n  const dispatch = useDispatch();\n  const state = useSelector(cropperSlice.selectState);\n  const image = useSelector(cropperSlice.selectImage);\n  const url = useSelector(cropperSlice.selectUrl);\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      const croppImage = cropper.getCroppedCanvas().toDataURL();\n      const formData = new FormData();\n      const blob = new Blob([croppImage], { type: \"image/png\" });\n      formData.append(\"image\", blob);\n      dispatch(cropperSlice.saveImageAsync(formData));\n    }\n  };\n\n  const onClose = () => {\n    dispatch(cropperSlice.handleClose());\n  };\n\n  return (\n    <>\n      <PopupCropperPreview url={url} />\n      <Form.Group>\n          <Form.File\n            label=\"Картинка\"\n            {...register(\"image\")}\n            onChange={onChange}\n          />\n        </Form.Group>\n      <Popup className={styles.popup} classContainer={styles.container} opened={state}>\n        <Cropper\n          src={image || ''}\n          {...options}\n          ref={cropperRef}\n          onInitialized={(instance) => {\n            setCropper(instance);\n          }}\n        />\n        <div className={styles.buttons}>\n          <Button onClick={getCropData}>Добавить</Button>\n          <Button onClick={onClose} variant=\"secondary\">Отмена</Button>\n        </div>\n      </Popup>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}