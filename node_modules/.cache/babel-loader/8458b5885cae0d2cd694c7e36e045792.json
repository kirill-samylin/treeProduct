{"ast":null,"code":"var _jsxFileName = \"/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect, useMemo } from 'react';\nimport styles from './Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\nimport { productsTree } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tree = ({\n  tree,\n  view = 'open',\n  className\n}) => {\n  _s();\n\n  const treeElement = /*#__PURE__*/createRef(null);\n  const set = useMemo(products => productsTree(products), [products]);\n\n  function getKey({\n    category_id,\n    product_id,\n    parent_id\n  }) {\n    if (!parent_id) {\n      return category_id;\n    }\n\n    if (!product_id) {\n      return category_id;\n    }\n\n    return product_id;\n  }\n\n  const handleStatus = product => {\n    console.log(product);\n  };\n\n  useEffect(() => {}, []);\n  useEffect(() => {\n    window.$(treeElement.current).sortable({\n      // fallbackOnBody: false,\n      group: 'list',\n      animation: 200,\n      ghostClass: 'ghost',\n      handle: '.position'\n    });\n  }, [treeElement]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    ref: treeElement,\n    className: cn(styles.tree, className, 'list-group m-4', {\n      [styles.open]: view === 'open'\n    }),\n    children: tree && tree.map(branch => /*#__PURE__*/_jsxDEV(Branch, {\n      product: branch,\n      handleStatus: handleStatus\n    }, getKey(branch), false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tree, \"YNUF55Hf/95jrhpS2n0kwnZ27Rg=\");\n\n_c = Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js"],"names":["React","createRef","useEffect","useMemo","styles","Branch","cn","productsTree","Tree","tree","view","className","treeElement","set","products","getKey","category_id","product_id","parent_id","handleStatus","product","console","log","window","$","current","sortable","group","animation","ghostClass","handle","open","map","branch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,OAAtC,QAAqD,OAArD;AACA,OAAOC,MAAP,MAAkB,mBAAlB;AACA,SAASC,MAAT,QAAuB,KAAvB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,OAAO,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,GAAC,MAAb;AAAqBC,EAAAA;AAArB,CAAD,KAAsC;AAAA;;AAEtD,QAAMC,WAAW,gBAAGX,SAAS,CAAC,IAAD,CAA7B;AAEA,QAAMY,GAAG,GAAGV,OAAO,CAAEW,QAAD,IAAcP,YAAY,CAACO,QAAD,CAA3B,EAAuC,CAACA,QAAD,CAAvC,CAAnB;;AAEA,WAASC,MAAT,CAAgB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,GAAhB,EAAyD;AACrD,QAAI,CAACA,SAAL,EAAgB;AACZ,aAAOF,WAAP;AACH;;AACD,QAAI,CAACC,UAAL,EAAiB;AACb,aAAOD,WAAP;AACH;;AACD,WAAOC,UAAP;AACH;;AAED,QAAME,YAAY,GAAIC,OAAD,IAAa;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACH,GAFD;;AAGAlB,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;AAIAA,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,MAAM,CAACC,CAAP,CAASZ,WAAW,CAACa,OAArB,EAA8BC,QAA9B,CAAuC;AACnC;AACAC,MAAAA,KAAK,EAAE,MAF4B;AAGnCC,MAAAA,SAAS,EAAE,GAHwB;AAInCC,MAAAA,UAAU,EAAE,OAJuB;AAKnCC,MAAAA,MAAM,EAAE;AAL2B,KAAvC;AAOH,GARQ,EAQN,CAAClB,WAAD,CARM,CAAT;AAUA,sBACI;AAAI,IAAA,GAAG,EAAEA,WAAT;AAAsB,IAAA,SAAS,EAAEN,EAAE,CAACF,MAAM,CAACK,IAAR,EAAcE,SAAd,EAAyB,gBAAzB,EAA2C;AAC1E,OAACP,MAAM,CAAC2B,IAAR,GAAerB,IAAI,KAAK;AADkD,KAA3C,CAAnC;AAAA,cAGKD,IAAI,IAAIA,IAAI,CAACuB,GAAL,CAAUC,MAAD,iBACd,QAAC,MAAD;AAA6B,MAAA,OAAO,EAAEA,MAAtC;AAA8C,MAAA,YAAY,EAAEd;AAA5D,OAAaJ,MAAM,CAACkB,MAAD,CAAnB;AAAA;AAAA;AAAA;AAAA,YADK;AAHb;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA1CM;;GAAMzB,I;;KAAAA,I","sourcesContent":["import React, { createRef, useEffect, useMemo } from 'react';\nimport styles from'./Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\nimport { productsTree } from '../../utils';\n\nexport const Tree = ({ tree, view='open', className }) => {\n\n    const treeElement = createRef(null);\n\n    const set = useMemo((products) => productsTree(products), [products])\n\n    function getKey({ category_id, product_id, parent_id, }) {\n        if (!parent_id) {\n            return category_id\n        } \n        if (!product_id) {\n            return category_id;\n        }\n        return product_id;\n    }\n\n    const handleStatus = (product) => {\n        console.log(product);\n    }\n    useEffect(() => {\n\n    }, [])\n\n    useEffect(() => {\n        window.$(treeElement.current).sortable({ \n            // fallbackOnBody: false,\n            group: 'list',\n            animation: 200,\n            ghostClass: 'ghost',\n            handle: '.position',\n        });\n    }, [treeElement]);\n\n    return (\n        <ul ref={treeElement} className={cn(styles.tree, className, 'list-group m-4', {\n            [styles.open]: view === 'open'\n        })}>\n            {tree && tree.map((branch) => (\n                <Branch key={getKey(branch)} product={branch} handleStatus={handleStatus} />\n            ))}\n        </ul>\n    )\n}"]},"metadata":{},"sourceType":"module"}