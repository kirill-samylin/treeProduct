{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getP } from \"./AppApi\";\nimport { product } from \"../../module\";\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false\n};\nexport const treeAsync = createAsyncThunk(\"tree/fetchTree\", async amount => {\n  const response = await fetchTree(amount);\n  return response.data;\n});\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      state.products = product.setStatus(item, state.products, !item.active);\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = product.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = product.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      console.log(item);\n      state.products = product.remove(item, state.products);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(treeAsync.pending, state => {\n      state.loading = true;\n    }).addCase(treeAsync.fulfilled, (state, action) => {\n      const list = product.flatten(action.payload);\n      const products = product.tree(action.payload, list);\n      state.loading = false;\n      state.products = products;\n      state.list = list;\n    });\n  }\n});\nexport const {\n  changeStatus,\n  changeExpand,\n  insert,\n  remove\n} = treeSlice.actions;\nexport const selectProducts = state => state.tree.products;\nexport default treeSlice.reducer;","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/App/App.slice.js"],"names":["createAsyncThunk","createSlice","getP","product","initialState","products","list","loading","treeAsync","amount","response","fetchTree","data","treeSlice","name","reducers","changeStatus","state","action","item","payload","setStatus","active","changeExpand","set","expanded","insert","parent_id","product_id","concat","remove","console","log","extraReducers","builder","addCase","pending","fulfilled","flatten","tree","actions","selectProducts","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getP } from \"./AppApi\";\nimport { product } from \"../../module\";\n\nconst initialState = {\n  products: [],\n  list: [],\n  loading: false,\n};\n\nexport const treeAsync = createAsyncThunk(\n  \"tree/fetchTree\",\n  async (amount) => {\n    const response = await fetchTree(amount);\n    return response.data;\n  }\n);\n\nexport const treeSlice = createSlice({\n  name: \"tree\",\n  initialState,\n  reducers: {\n    changeStatus: (state, action) => {\n      const item = action.payload;\n      state.products = product.setStatus(\n        item,\n        state.products,\n        !item.active\n      );\n    },\n    changeExpand: (state, action) => {\n      const item = action.payload;\n      state.products = product.set(item, state.products, 'expanded', !item.expanded);\n    },\n    insert: (state, action) => {\n      const item = action.payload;\n      if (item.parent_id === \"root\" && !item.product_id) {\n        state.products = [item, ...state.products.concat()];\n      } else {\n        state.products = product.insert(item, state.products.concat());\n      }\n    },\n    remove: (state, action) => {\n      const item = action.payload;\n      console.log(item)\n      state.products = product.remove(item, state.products);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(treeAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(treeAsync.fulfilled, (state, action) => {\n        const list = product.flatten(action.payload);\n        const products = product.tree(action.payload, list);\n        state.loading = false;\n        state.products = products;\n        state.list = list;\n      });\n  },\n});\n\nexport const { changeStatus, changeExpand, insert, remove } = treeSlice.actions;\n\nexport const selectProducts = (state) => state.tree.products;\n\nexport default treeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}