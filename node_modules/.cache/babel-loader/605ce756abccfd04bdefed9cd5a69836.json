{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { saveImage } from \"../../services/api\";\nconst initialState = {\n  isOpen: false,\n  image: \"\",\n  url: \"\",\n  loading: false,\n  imageLoad: false\n};\nexport const saveImageAsync = createAsyncThunk(\"imageCropper/saveImage\", async data => {\n  const response = await saveImage(data);\n  return response.data;\n});\nexport const imageCropperSlice = createSlice({\n  name: \"imageCropper\",\n  initialState,\n  reducers: {\n    handleClose: state => {\n      state.isOpen = false;\n      state.image = \"\";\n    },\n    handleOpen: (state, action) => {\n      state.image = action.payload;\n      state.isOpen = true; // state.url = \"\";\n    },\n    handleRemove: state => {\n      state.url = \"\";\n    },\n    startImageLoad: state => {\n      state.imageLoad;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(saveImageAsync.pending, state => {\n      state.loading = true;\n      state.isOpen = false;\n    }).addCase(saveImageAsync.fulfilled, (state, action) => {\n      state.url = action.payload;\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  handleClose,\n  handleOpen,\n  handleRemove\n} = imageCropperSlice.actions;\nexport const selectState = state => state.imageCropper.isOpen;\nexport const selectImage = state => state.imageCropper.image;\nexport const selectUrl = state => state.imageCropper.url;\nexport const selectLoading = state => state.imageCropper.loading;\nexport const selectImageLoad = state => state.imageCropper.imageLoad;\nexport default imageCropperSlice.reducer;","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/ImageCropper/ImageCropper.slice.js"],"names":["createSlice","createAsyncThunk","saveImage","initialState","isOpen","image","url","loading","imageLoad","saveImageAsync","data","response","imageCropperSlice","name","reducers","handleClose","state","handleOpen","action","payload","handleRemove","startImageLoad","extraReducers","builder","addCase","pending","fulfilled","actions","selectState","imageCropper","selectImage","selectUrl","selectLoading","selectImageLoad","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA6C,kBAA7C;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,KADW;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,GAAG,EAAE,EAHc;AAInBC,EAAAA,OAAO,EAAE,KAJU;AAKnBC,EAAAA,SAAS,EAAE;AALQ,CAArB;AAQA,OAAO,MAAMC,cAAc,GAAGR,gBAAgB,CAC5C,wBAD4C,EAE5C,MAAOS,IAAP,IAAgB;AACd,QAAMC,QAAQ,GAAG,MAAMT,SAAS,CAACQ,IAAD,CAAhC;AACA,SAAOC,QAAQ,CAACD,IAAhB;AACD,CAL2C,CAAvC;AAQP,OAAO,MAAME,iBAAiB,GAAGZ,WAAW,CAAC;AAC3Ca,EAAAA,IAAI,EAAE,cADqC;AAE3CV,EAAAA,YAF2C;AAG3CW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAGC,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACZ,MAAN,GAAe,KAAf;AACAY,MAAAA,KAAK,CAACX,KAAN,GAAc,EAAd;AACD,KAJO;AAKRY,IAAAA,UAAU,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC7BF,MAAAA,KAAK,CAACX,KAAN,GAAca,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACZ,MAAN,GAAe,IAAf,CAF6B,CAG7B;AACD,KATO;AAURgB,IAAAA,YAAY,EAAGJ,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACV,GAAN,GAAY,EAAZ;AACD,KAZO;AAaRe,IAAAA,cAAc,EAAGL,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAACR,SAAN;AACD;AAfO,GAHiC;AAoB3Cc,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWf,cAAc,CAACgB,OAD1B,EACoCT,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACT,OAAN,GAAgB,IAAhB;AACAS,MAAAA,KAAK,CAACZ,MAAN,GAAe,KAAf;AACD,KAJH,EAKGoB,OALH,CAKWf,cAAc,CAACiB,SAL1B,EAKqC,CAACV,KAAD,EAAQE,MAAR,KAAmB;AACpDF,MAAAA,KAAK,CAACV,GAAN,GAAYY,MAAM,CAACC,OAAnB;AACAH,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACD,KARH;AASD;AA9B0C,CAAD,CAArC;AAiCP,OAAO,MAAM;AAAEQ,EAAAA,WAAF;AAAeE,EAAAA,UAAf;AAA2BG,EAAAA;AAA3B,IAA4CR,iBAAiB,CAACe,OAApE;AAEP,OAAO,MAAMC,WAAW,GAAIZ,KAAD,IAAWA,KAAK,CAACa,YAAN,CAAmBzB,MAAlD;AACP,OAAO,MAAM0B,WAAW,GAAId,KAAD,IAAWA,KAAK,CAACa,YAAN,CAAmBxB,KAAlD;AACP,OAAO,MAAM0B,SAAS,GAAIf,KAAD,IAAWA,KAAK,CAACa,YAAN,CAAmBvB,GAAhD;AACP,OAAO,MAAM0B,aAAa,GAAIhB,KAAD,IAAWA,KAAK,CAACa,YAAN,CAAmBtB,OAApD;AACP,OAAO,MAAM0B,eAAe,GAAIjB,KAAD,IAAWA,KAAK,CAACa,YAAN,CAAmBrB,SAAtD;AAGP,eAAeI,iBAAiB,CAACsB,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport { saveImage } from \"../../services/api\";\n\nconst initialState = {\n  isOpen: false,\n  image: \"\",\n  url: \"\",\n  loading: false,\n  imageLoad: false,\n};\n\nexport const saveImageAsync = createAsyncThunk(\n  \"imageCropper/saveImage\",\n  async (data) => {\n    const response = await saveImage(data);\n    return response.data;\n  }\n);\n\nexport const imageCropperSlice = createSlice({\n  name: \"imageCropper\",\n  initialState,\n  reducers: {\n    handleClose: (state) => {\n      state.isOpen = false;\n      state.image = \"\";\n    },\n    handleOpen: (state, action) => {\n      state.image = action.payload;\n      state.isOpen = true;\n      // state.url = \"\";\n    },\n    handleRemove: (state) => {\n      state.url = \"\";\n    },\n    startImageLoad: (state) => {\n      state.imageLoad\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(saveImageAsync.pending, (state) => {\n        state.loading = true;\n        state.isOpen = false;\n      })\n      .addCase(saveImageAsync.fulfilled, (state, action) => {\n        state.url = action.payload;\n        state.loading = false;\n      });\n  },\n});\n\nexport const { handleClose, handleOpen, handleRemove } = imageCropperSlice.actions;\n\nexport const selectState = (state) => state.imageCropper.isOpen;\nexport const selectImage = (state) => state.imageCropper.image;\nexport const selectUrl = (state) => state.imageCropper.url;\nexport const selectLoading = (state) => state.imageCropper.loading;\nexport const selectImageLoad = (state) => state.imageCropper.imageLoad;\n\n\nexport default imageCropperSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}