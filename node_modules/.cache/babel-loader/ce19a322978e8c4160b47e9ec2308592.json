{"ast":null,"code":"import _defineProperty from\"/Users/kirillsamylin/Desktop/table/stop-list/node_modules/@babel/runtime/helpers/esm/defineProperty\";import React,{createRef,useEffect,memo}from'react';import styles from'./Tree.module.css';import{Branch}from'../';import cn from'classnames';import{jsx as _jsx}from\"react/jsx-runtime\";export var Tree=/*#__PURE__*/memo(function(_ref){var id=_ref.id,tree=_ref.tree,className=_ref.className,expanded=_ref.expanded;var treeElement=/*#__PURE__*/createRef(null);function getKey(_ref2){var category_id=_ref2.category_id,product_id=_ref2.product_id,parent_id=_ref2.parent_id;if(!parent_id){return category_id;}if(!product_id){return category_id;}return product_id;}var onSort=function onSort(){console.log('1234');return false;};var onEnd=function onEnd(evt){var item=evt.item;// dragged HTMLElement\nvar parent=evt.from;var id=item.dataset.id;var name=item.dataset.name;var category_id=parent.dataset.id;var index=evt.newIndex;console.log({'id предмета':id,'id категории куда суем':category_id,'index - место куда вставляем':index,'тип':name});// evt.to;    // target list\n// evt.from;  // previous list\n// evt.oldIndex;  // element's old index within old parent\n// evt.newIndex;  // element's new index within new parent\n// evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n// evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n// evt.clone // the clone element\n// evt.pullMode;\n// console.log(item)\n// console.log(id, category_id)\n// console.log(evt.oldIndex, evt.newIndex)\n};var onMove=function onMove(evt){var parent=evt.to;var item=evt.dragged;var category_id=parent.dataset.id;var name=item.dataset.name;if(category_id===\"root\"&&name===\"product\")return false;return true;};useEffect(function(){window.$(treeElement.current).sortable({fallbackOnBody:false,// selectedClass: styles.selected,\n// multiDrag: true,\ngroup:{name:'list'},animation:200,ghostClass:'ghost',handle:'.position',onSort:onSort,onEnd:onEnd,onMove:onMove});},[treeElement]);return/*#__PURE__*/_jsx(\"ul\",{ref:treeElement,\"data-id\":id,className:cn(styles.tree,className,'list-group',_defineProperty({},styles.open,expanded)),children:tree&&tree.map(function(branch){return/*#__PURE__*/_jsx(Branch,{product:branch},getKey(branch));})});});","map":{"version":3,"sources":["/Users/kirillsamylin/Desktop/table/stop-list/src/components/Tree/Tree.js"],"names":["React","createRef","useEffect","memo","styles","Branch","cn","Tree","id","tree","className","expanded","treeElement","getKey","category_id","product_id","parent_id","onSort","console","log","onEnd","evt","item","parent","from","dataset","name","index","newIndex","onMove","to","dragged","window","$","current","sortable","fallbackOnBody","group","animation","ghostClass","handle","open","map","branch"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, memo } from 'react';\nimport styles from'./Tree.module.css';\nimport { Branch } from '../';\nimport cn from 'classnames';\n\nexport const Tree = memo(({ id, tree, className, expanded }) => {\n    const treeElement = createRef(null);\n    \n    function getKey({ category_id, product_id, parent_id, }) {\n        if (!parent_id) {\n            return category_id\n        } \n        if (!product_id) {\n            return category_id;\n        }\n        return product_id;\n    }\n    const onSort = () => {\n\n        console.log('1234')\n        return false\n    };\n    const onEnd = (evt) => {\n        const item = evt.item;  // dragged HTMLElement\n        const parent = evt.from;\n        const id = item.dataset.id;\n        const name = item.dataset.name;\n        const category_id = parent.dataset.id;\n        const index = evt.newIndex;\n        console.log({\n            'id предмета': id,\n            'id категории куда суем': category_id,\n            'index - место куда вставляем': index,\n            'тип': name,\n        });\n        // evt.to;    // target list\n        // evt.from;  // previous list\n        // evt.oldIndex;  // element's old index within old parent\n        // evt.newIndex;  // element's new index within new parent\n        // evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\n        // evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\n        // evt.clone // the clone element\n        // evt.pullMode;\n        // console.log(item)\n        // console.log(id, category_id)\n        // console.log(evt.oldIndex, evt.newIndex)\n    };\n    const onMove = (evt) => {\n        const parent = evt.to;\n        const item = evt.dragged;\n        const category_id = parent.dataset.id;\n        const name = item.dataset.name;\n        if (category_id === \"root\" && name === \"product\") return false\n        return true\n    };\n    useEffect(() => {\n        window.$(treeElement.current).sortable({ \n            fallbackOnBody: false,\n            // selectedClass: styles.selected,\n            // multiDrag: true,\n            group: {\n                name: 'list',\n            },\n            animation: 200,\n            ghostClass: 'ghost',\n            handle: '.position',\n            onSort: onSort,\n            onEnd,\n            onMove,\n        });\n    }, [treeElement]);\n\n    return (\n        <ul ref={treeElement} data-id={id} className={cn(styles.tree, className, 'list-group', {\n            [styles.open]: expanded,\n        })}>\n            {tree && tree.map((branch) => (\n                <Branch \n                    key={getKey(branch)} \n                    product={branch}\n                />\n            ))}\n        </ul>\n    )\n});"]},"metadata":{},"sourceType":"module"}